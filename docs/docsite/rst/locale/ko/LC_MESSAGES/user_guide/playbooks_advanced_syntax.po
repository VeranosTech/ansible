# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:5
msgid "Advanced Syntax"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:7
msgid ""
"The advanced YAML syntax examples on this page give you more control over"
" the data placed in YAML files used by Ansible. You can find additional "
"information about Python-specific YAML in the official `PyYAML "
"Documentation "
"<https://pyyaml.org/wiki/PyYAMLDocumentation#YAMLtagsandPythontypes>`_."
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:15
msgid "Unsafe or Raw Strings"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:17
msgid ""
"Ansible provides an internal data type for declaring variable values as "
"\"unsafe\". This means that the data held within the variables value "
"should be treated as unsafe preventing unsafe character substitution and "
"information disclosure."
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:19
#, python-format
msgid ""
"Jinja2 contains functionality for escaping, or telling Jinja2 to not "
"template data by means of functionality such as ``{% raw %} ... {% endraw"
" %}``, however this uses a more comprehensive implementation to ensure "
"that the value is never templated."
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:21
msgid ""
"Using YAML tags, you can also mark a value as \"unsafe\" by using the "
"``!unsafe`` tag such as:"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:28
msgid "In a playbook, this may look like::"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:37
msgid ""
"For complex variables such as hashes or arrays, ``!unsafe`` should be "
"used on the individual elements such as::"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:50
msgid "YAML anchors and aliases: sharing variable values"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:52
msgid ""
"`YAML anchors and aliases "
"<https://yaml.org/spec/1.2/spec.html#id2765878>`_ help you define, "
"maintain, and use shared variable values in a flexible way. You define an"
" anchor with ``&``, then refer to it using an alias, denoted with ``*``. "
"Here's an example that sets three values with an anchor, uses two of "
"those values with an alias, and overrides the third value::"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:69
msgid ""
"Here, ``app1`` and ``app2`` share the values for ``opts`` and ``port`` "
"using the anchor ``&jvm_opts`` and the alias ``*jvm_opts``. The value for"
" ``path`` is merged by ``<<`` or `merge operator "
"<https://yaml.org/type/merge.html>`_."
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:72
msgid ""
"Anchors and aliases also let you share complex sets of variable values, "
"including nested variables. If you have one variable value that includes "
"another variable value, you can define them separately::"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:78
msgid ""
"This is inefficient and, at scale, means more maintenance. To incorporate"
" the version value in the name, you can use an anchor in ``app_version`` "
"and an alias in ``custom_name``::"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:87
msgid ""
"Now, you can re-use the value of ``app_version`` within the value of  "
"``custom_name`` and use the output in a template::"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:103
msgid ""
"You've anchored the value of ``version`` with the ``&my_version`` anchor,"
" and re-used it with the ``*my_version`` alias. Anchors and aliases let "
"you access nested values inside dictionaries."
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:107
msgid ":ref:`playbooks_variables`"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:108
msgid "All about variables"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:109
msgid "`User Mailing List <https://groups.google.com/group/ansible-project>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:110
msgid "Have a question?  Stop by the google group!"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:111
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_advanced_syntax.rst:112
msgid "#ansible IRC chat channel"
msgstr ""

#~ msgid "Topics"
#~ msgstr ""

#~ msgid ""
#~ "This page describes advanced YAML syntax"
#~ " that enables you to have more "
#~ "control over the data placed in "
#~ "YAML files used by Ansible."
#~ msgstr ""

#~ msgid "YAML tags and Python types"
#~ msgstr ""

#~ msgid ""
#~ "The documentation covered here is an "
#~ "extension of the documentation that can"
#~ " be found in the `PyYAML "
#~ "Documentation "
#~ "<https://pyyaml.org/wiki/PyYAMLDocumentation#YAMLtagsandPythontypes>`_"
#~ msgstr ""

#~ msgid ":doc:`playbooks_variables`"
#~ msgstr ""

