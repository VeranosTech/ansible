# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/playbooks_error_handling.rst:2
msgid "Error Handling In Playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:4
msgid "Topics"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:6
msgid ""
"Ansible normally has defaults that make sure to check the return codes of"
" commands and modules and it fails fast -- forcing an error to be dealt "
"with unless you decide otherwise."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:9
msgid ""
"Sometimes a command that returns different than 0 isn't an error.  "
"Sometimes a command might not always need to report that it 'changed' the"
" remote system.  This section describes how to change the default "
"behavior of Ansible for certain tasks so output and error handling "
"behavior is as desired."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:17
msgid "Ignoring Failed Commands"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:19
msgid ""
"Generally playbooks will stop executing any more steps on a host that has"
" a task fail. Sometimes, though, you want to continue on.  To do so, "
"write a task that looks like this::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:26
msgid ""
"Note that the above system only governs the return value of failure of "
"the particular task, so if you have an undefined variable used or a "
"syntax error, it will still raise an error that users will need to "
"address. Note that this will not prevent failures on connection or "
"execution issues. This feature only works when the task must be able to "
"run and return a value of 'failed'."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:34
msgid "Resetting Unreachable Hosts"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:38
msgid ""
"Connection failures set hosts as 'UNREACHABLE', which will remove them "
"from the list of active hosts for the run. To recover from these issues "
"you can use `meta: clear_host_errors` to have all currently flagged hosts"
" reactivated, so subsequent tasks can try to use them again."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:46
msgid "Handlers and Failure"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:48
msgid ""
"When a task fails on a host, handlers which were previously notified will"
" *not* be run on that host. This can lead to cases where an unrelated "
"failure can leave a host in an unexpected state. For example, a task "
"could update a configuration file and notify a handler to restart some "
"service. If a task later on in the same play fails, the service will not "
"be restarted despite the configuration change."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:55
msgid ""
"You can change this behavior with the ``--force-handlers`` command-line "
"option, or by including ``force_handlers: True`` in a play, or "
"``force_handlers = True`` in ansible.cfg. When handlers are forced, they "
"will run when notified even if a task fails on that host. (Note that "
"certain errors could still prevent the handler from running, such as a "
"host becoming unreachable.)"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:64
msgid "Controlling What Defines Failure"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:66
msgid ""
"Ansible lets you define what \"failure\" means in each task using the "
"``failed_when`` conditional. As with all conditionals in Ansible, lists "
"of multiple ``failed_when`` conditions are joined with an implicit "
"``and``, meaning the task only fails when *all* conditions are met. If "
"you want to trigger a failure when any of the conditions is met, you must"
" define the conditions in a string with an explicit ``or`` operator."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:68
msgid ""
"You may check for failure by searching for a word or phrase in the output"
" of a command::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:75
msgid "or based on the return code::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:82
msgid ""
"In previous version of Ansible, this can still be accomplished as "
"follows::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:94
msgid ""
"You can also combine multiple conditions for failure. This task will fail"
" if both conditions are true::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:103
msgid ""
"If you want the task to fail when only one condition is satisfied, change"
" the ``failed_when`` definition to::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:107
msgid ""
"If you have too many conditions to fit neatly into one line, you can "
"split it into a multi-line yaml value with ``>``::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:121
msgid "Overriding The Changed Result"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:123
msgid ""
"When a shell/command or other module runs it will typically report "
"\"changed\" status based on whether it thinks it affected machine state."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:126
msgid ""
"Sometimes you will know, based on the return code or output that it did "
"not make any changes, and wish to override the \"changed\" result such "
"that it does not appear in report output or does not cause handlers to "
"fire::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:141
msgid "You can also combine multiple conditions to override \"changed\" result::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:151
msgid "Aborting the play"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:153
msgid ""
"Sometimes it's desirable to abort the entire play on failure, not just "
"skip remaining tasks for a host."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:155
msgid ""
"The ``any_errors_fatal`` play option will end the play when any tasks "
"results in an error and stop execution of the play::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:162
msgid ""
"for finer-grained control ``max_fail_percentage`` can be used to abort "
"the run after a given percentage of hosts has failed."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:165
msgid "Using blocks"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:167
msgid ""
"Most of what you can apply to a single task (with the exception of loops)"
" can be applied at the :ref:`playbooks_blocks` level, which also makes it"
" much easier to set data or directives common to the tasks. Blocks also "
"introduce the ability to handle errors in a way similar to exceptions in "
"most programming languages. Blocks only deal with 'failed' status of a "
"task. A bad task definition or an unreachable host are not 'rescuable' "
"errors::"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:184
msgid ""
"This will 'revert' the failed status of the outer ``block`` task for the "
"run and the play will continue as if it had succeeded. See "
":ref:`block_error_handling` for more examples."
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:189
msgid ":ref:`playbooks_intro`"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:190
msgid "An introduction to playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:191
msgid ":ref:`playbooks_best_practices`"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:192
msgid "Best practices in playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:193
msgid ":ref:`playbooks_conditionals`"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:194
msgid "Conditional statements in playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:195
msgid ":ref:`playbooks_variables`"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:196
msgid "All about variables"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:197
msgid "`User Mailing List <https://groups.google.com/group/ansible-devel>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:198
msgid "Have a question?  Stop by the google group!"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:199
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_error_handling.rst:200
msgid "#ansible IRC chat channel"
msgstr ""

#~ msgid ""
#~ "Suppose the error code of a "
#~ "command is meaningless and to tell "
#~ "if there is a failure what really"
#~ " matters is the output of the "
#~ "command, for instance if the string "
#~ "\"FAILED\" is in the output."
#~ msgstr ""

#~ msgid "Ansible provides a way to specify this behavior as follows::"
#~ msgstr ""

#~ msgid ""
#~ "You can also combine multiple conditions"
#~ " to specify this behavior as "
#~ "follows::"
#~ msgstr ""

#~ msgid ""
#~ "The ``any_errors_fatal`` play option will "
#~ "mark all hosts as failed if any"
#~ " fails, causing an immediate abort::"
#~ msgstr ""

#~ msgid ":doc:`playbooks`"
#~ msgstr ""

#~ msgid ":doc:`playbooks_best_practices`"
#~ msgstr ""

#~ msgid ":doc:`playbooks_conditionals`"
#~ msgstr ""

#~ msgid ":doc:`playbooks_variables`"
#~ msgstr ""

