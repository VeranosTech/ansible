# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/intro_dynamic_inventory.rst:6
msgid "Working With Dynamic Inventory"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:9
msgid "Topics"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:11
msgid ""
"If your Ansible inventory fluctuates over time, with hosts spinning up "
"and shutting down in response to business demands, the static inventory "
"solutions described in :ref:`inventory` will not serve your needs. You "
"may need to track hosts from multiple sources: cloud providers, LDAP, "
"`Cobbler <https://cobbler.github.io>`_, and/or enterprise CMDB systems."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:13
msgid ""
"Ansible integrates all of these options via a dynamic external inventory "
"system. Ansible supports two ways to connect with external inventory:  "
":ref:`inventory_plugins` and `inventory scripts "
"<https://github.com/ansible/ansible/tree/devel/contrib/inventory>`."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:15
msgid ""
"Inventory plugins take advantage of the most recent updates to Ansible's "
"core code. We recommend plugins over scripts for dynamic inventory. You "
"can :ref:`write your own plugin <developing_inventory>` to connect to "
"additional dynamic inventory sources."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:17
msgid ""
"You can still use inventory scripts if you choose. When we implemented "
"inventory plugins, we ensured backwards compatibility via the script "
"inventory plugin. The examples below illustrate how to use inventory "
"scripts."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:19
msgid ""
"If you'd like a GUI for handling dynamic inventory, the "
":ref:`ansible_tower` inventory database syncs with all your dynamic "
"inventory sources, provides web and REST access to the results, and "
"offers a graphical inventory editor. With a database record of all of "
"your hosts, you can correlate past event history and see which hosts have"
" had failures on their last playbook runs."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:24
msgid "Inventory Script Example: Cobbler"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:26
msgid ""
"Ansible integrates seamlessly with `Cobbler "
"<https://cobbler.github.io>`_, a Linux installation server originally "
"written by Michael DeHaan and now led by James Cammarata, who works for "
"Ansible."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:28
msgid ""
"While primarily used to kickoff OS installations and manage DHCP and DNS,"
" Cobbler has a generic layer that can represent data for multiple "
"configuration management systems (even at the same time) and serve as a "
"'lightweight CMDB'."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:31
msgid ""
"To tie Ansible's inventory to Cobbler, copy `this script "
"<https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/cobbler.py>`_"
" to ``/etc/ansible`` and ``chmod +x`` the file. Run ``cobblerd`` any time"
" you use Ansible and use the ``-i`` command line option (e.g. ``-i "
"/etc/ansible/cobbler.py``) to communicate with Cobbler using Cobbler's "
"XMLRPC API."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:33
msgid ""
"Add a ``cobbler.ini`` file in ``/etc/ansible`` so Ansible knows where the"
" Cobbler server is and some cache improvements can be used. For example::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:55
msgid ""
"First test the script by running ``/etc/ansible/cobbler.py`` directly.   "
"You should see some JSON data output, but it may not have anything in it "
"just yet."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:57
msgid ""
"Let's explore what this does.  In Cobbler, assume a scenario somewhat "
"like the following::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:64
msgid ""
"In the example above, the system 'foo.example.com' will be addressable by"
" ansible directly, but will also be addressable when using the group "
"names 'webserver' or 'atlanta'.  Since Ansible uses SSH, we'll try to "
"contact system foo over 'foo.example.com', only, never just 'foo'.  "
"Similarly, if you try \"ansible foo\" it wouldn't find the system... but "
"\"ansible 'foo*'\" would, because the system DNS name starts with 'foo'."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:66
msgid ""
"The script doesn't just provide host and group info.  In addition, as a "
"bonus, when the 'setup' module is run (which happens automatically when "
"using playbooks), the variables 'a', 'b', and 'c' will all be auto-"
"populated in the templates::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:71
msgid "Which could be executed just like this::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:77
msgid ""
"The name 'webserver' came from Cobbler, as did the variables for the "
"config file.  You can still pass in your own variables like normal in "
"Ansible, but variables from the external inventory script will override "
"any that have the same name."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:82
msgid ""
"So, with the template above (``motd.j2``), this would result in the "
"following data being written to ``/etc/motd`` for system 'foo'::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:86
msgid "And on system 'bar' (bar.example.com)::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:90
msgid ""
"And technically, though there is no major good reason to do it, this also"
" works too::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:94
msgid ""
"So in other words, you can use those variables in arguments/actions as "
"well."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:99
msgid "Inventory Script Example: AWS EC2"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:101
msgid ""
"If you use Amazon Web Services EC2, maintaining an inventory file might "
"not be the best approach, because hosts may come and go over time, be "
"managed by external applications, or you might even be using AWS "
"autoscaling. For this reason, you can use the `EC2 external inventory  "
"<https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.py>`_"
" script."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:103
msgid ""
"You can use this script in one of two ways. The easiest is to use "
"Ansible's ``-i`` command line option and specify the path to the script "
"after marking it executable::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:108
msgid ""
"The second option is to copy the script to `/etc/ansible/hosts` and "
"`chmod +x` it. You will also need to copy the `ec2.ini  "
"<https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.ini>`_"
" file to `/etc/ansible/ec2.ini`. Then you can run ansible as you would "
"normally."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:110
msgid ""
"To successfully make an API call to AWS, you will need to configure Boto "
"(the Python interface to AWS). There are a `variety of methods "
"<http://docs.pythonboto.org/en/latest/boto_config_tut.html>`_ available, "
"but the simplest is just to export two environment variables::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:115
msgid "You can test the script by itself to make sure your config is correct::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:120
msgid ""
"After a few moments, you should see your entire EC2 inventory across all "
"regions in JSON."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:122
msgid ""
"If you use Boto profiles to manage multiple AWS accounts, you can pass "
"``--profile PROFILE`` name to the ``ec2.py`` script. An example profile "
"might be::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:132
msgid ""
"You can then run ``ec2.py --profile prod`` to get the inventory for the "
"prod account, although this option is not supported by ``ansible-"
"playbook``. You can also use the ``AWS_PROFILE`` variable - for example: "
"``AWS_PROFILE=prod ansible-playbook -i ec2.py myplaybook.yml``"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:135
msgid ""
"Since each region requires its own API call, if you are only using a "
"small set of regions, you can edit the ``ec2.ini`` file and comment out "
"the regions you are not using."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:137
msgid ""
"There are other config options in ``ec2.ini``, including cache control "
"and destination variables. By default, the ``ec2.ini`` file is configured"
" for **all Amazon cloud services**, but you can comment out any features "
"that aren't applicable. For example, if you don't have ``RDS`` or "
"``elasticache``, you can set them to ``False`` ::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:149
msgid ""
"At their heart, inventory files are simply a mapping from some name to a "
"destination address. The default ``ec2.ini`` settings are configured for "
"running Ansible from outside EC2 (from your laptop for example) -- and "
"this is not the most efficient way to manage EC2."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:151
msgid ""
"If you are running Ansible from within EC2, internal DNS names and IP "
"addresses may make more sense than public DNS names. In this case, you "
"can modify the ``destination_variable`` in ``ec2.ini`` to be the private "
"DNS name of an instance. This is particularly important when running "
"Ansible within a private subnet inside a VPC, where the only way to "
"access an instance is via its private IP address. For VPC instances, "
"`vpc_destination_variable` in ``ec2.ini`` provides a means of using which"
" ever `boto.ec2.instance variable "
"<http://docs.pythonboto.org/en/latest/ref/ec2.html#module-"
"boto.ec2.instance>`_ makes the most sense for your use case."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:153
msgid ""
"The EC2 external inventory provides mappings to instances from several "
"groups:"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:156
msgid "Global"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:156
msgid "All instances are in group ``ec2``."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:162
msgid "Instance ID"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:159
msgid ""
"These are groups of one since instance IDs are unique. e.g. "
"``i-00112233`` ``i-a1b1c1d1``"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:168
msgid "Region"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:165
msgid ""
"A group of all instances in an AWS region. e.g. ``us-east-1`` ``us-"
"west-2``"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:174
msgid "Availability Zone"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:171
msgid ""
"A group of all instances in an availability zone. e.g. ``us-east-1a`` "
"``us-east-1b``"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:181
msgid "Security Group"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:177
msgid ""
"Instances belong to one or more security groups. A group is created for "
"each security group, with all characters except alphanumerics, converted "
"to underscores (_). Each group is prefixed by ``security_group_``. "
"Currently, dashes (-) are also converted to underscores (_). You can "
"change using the replace_dash_in_groups setting in ec2.ini (this has "
"changed across several versions so check the ec2.ini for details). e.g. "
"``security_group_default`` ``security_group_webservers`` "
"``security_group_Pete_s_Fancy_Group``"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:188
msgid "Tags"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:184
msgid ""
"Each instance can have a variety of key/value pairs associated with it "
"called Tags. The most common tag key is 'Name', though anything is "
"possible. Each key/value pair is its own group of instances, again with "
"special characters converted to underscores, in the format "
"``tag_KEY_VALUE`` e.g. ``tag_Name_Web`` can be used as is "
"``tag_Name_redis-master-001`` becomes ``tag_Name_redis_master_001`` "
"``tag_aws_cloudformation_logical-id_WebServerGroup`` becomes "
"``tag_aws_cloudformation_logical_id_WebServerGroup``"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:190
msgid ""
"When the Ansible is interacting with a specific server, the EC2 inventory"
" script is called again with the ``--host HOST`` option. This looks up "
"the HOST in the index cache to get the instance ID, and then makes an API"
" call to AWS to get information about that specific instance. It then "
"makes information about that instance available as variables to your "
"playbooks. Each variable is prefixed by ``ec2_``. Here are some of the "
"variables available:"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:192
msgid "ec2_architecture"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:193
msgid "ec2_description"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:194
msgid "ec2_dns_name"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:195
msgid "ec2_id"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:196
msgid "ec2_image_id"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:197
msgid "ec2_instance_type"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:198
msgid "ec2_ip_address"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:199
msgid "ec2_kernel"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:200
msgid "ec2_key_name"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:201
msgid "ec2_launch_time"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:202
msgid "ec2_monitored"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:203
msgid "ec2_ownerId"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:204
msgid "ec2_placement"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:205
msgid "ec2_platform"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:206
msgid "ec2_previous_state"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:207
msgid "ec2_private_dns_name"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:208
msgid "ec2_private_ip_address"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:209
msgid "ec2_public_dns_name"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:210
msgid "ec2_ramdisk"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:211
msgid "ec2_region"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:212
msgid "ec2_root_device_name"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:213
msgid "ec2_root_device_type"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:214
msgid "ec2_security_group_ids"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:215
msgid "ec2_security_group_names"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:216
msgid "ec2_spot_instance_request_id"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:217
msgid "ec2_state"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:218
msgid "ec2_state_code"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:219
msgid "ec2_state_reason"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:220
msgid "ec2_status"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:221
msgid "ec2_subnet_id"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:222
msgid "ec2_tag_Name"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:223
msgid "ec2_tenancy"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:224
msgid "ec2_virtualization_type"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:225
msgid "ec2_vpc_id"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:227
msgid ""
"Both ``ec2_security_group_ids`` and ``ec2_security_group_names`` are "
"comma-separated lists of all security groups. Each EC2 tag is a variable "
"in the format ``ec2_tag_KEY``."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:229
msgid ""
"To see the complete list of variables available for an instance, run the "
"script by itself::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:234
msgid ""
"Note that the AWS inventory script will cache results to avoid repeated "
"API calls, and this cache setting is configurable in ec2.ini.  To "
"explicitly clear the cache, you can run the ec2.py script with the "
"``--refresh-cache`` parameter::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:242
msgid "Inventory Script Example: OpenStack"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:244
msgid ""
"If you use an OpenStack-based cloud, instead of manually maintaining your"
" own inventory file, you can use the ``openstack_inventory.py`` dynamic "
"inventory to pull information about your compute instances directly from "
"OpenStack."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:246
msgid ""
"You can download the latest version of the OpenStack inventory script "
"`here "
"<https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/openstack_inventory.py>`_."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:248
msgid ""
"You can use the inventory script explicitly (by passing the `-i "
"openstack_inventory.py` argument to Ansible) or implicitly (by placing "
"the script at `/etc/ansible/hosts`)."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:251
msgid "Explicit use of OpenStack inventory script"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:253
msgid ""
"Download the latest version of the OpenStack dynamic inventory script and"
" make it executable::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:259
msgid ""
"Do not name it `openstack.py`. This name will conflict with imports from "
"openstacksdk."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:261
msgid "Source an OpenStack RC file::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:267
msgid ""
"An OpenStack RC file contains the environment variables required by the "
"client tools to establish a connection with the cloud provider, such as "
"the authentication URL, user name, password and region name. For more "
"information on how to download, create or source an OpenStack RC file, "
"please refer to `Set environment variables using the OpenStack RC file "
"<https://docs.openstack.org/user-"
"guide/common/cli_set_environment_variables_using_openstack_rc.html>`_."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:269
msgid ""
"You can confirm the file has been successfully sourced by running a "
"simple command, such as `nova list` and ensuring it return no errors."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:273
msgid ""
"The OpenStack command line clients are required to run the `nova list` "
"command. For more information on how to install them, please refer to "
"`Install the OpenStack command-line clients <https://docs.openstack.org"
"/user-guide/common/cli_install_openstack_command_line_clients.html>`_."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:275
#: ../../rst/user_guide/intro_dynamic_inventory.rst:300
msgid ""
"You can test the OpenStack dynamic inventory script manually to confirm "
"it is working as expected::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:279
#: ../../rst/user_guide/intro_dynamic_inventory.rst:304
msgid ""
"After a few moments you should see some JSON output with information "
"about your compute instances."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:281
msgid ""
"Once you confirm the dynamic inventory script is working as expected, you"
" can tell Ansible to use the `openstack_inventory.py` script as an "
"inventory file, as illustrated below::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:286
msgid "Implicit use of OpenStack inventory script"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:288
msgid ""
"Download the latest version of the OpenStack dynamic inventory script, "
"make it executable and copy it to `/etc/ansible/hosts`::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:294
msgid ""
"Download the sample configuration file, modify it to suit your needs and "
"copy it to `/etc/ansible/openstack.yml`::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:307
msgid "Refreshing the cache"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:309
msgid ""
"Note that the OpenStack dynamic inventory script will cache results to "
"avoid repeated API calls. To explicitly clear the cache, you can run the "
"openstack_inventory.py (or hosts) script with the ``--refresh`` "
"parameter::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:316
msgid "Other inventory scripts"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:318
msgid ""
"You can find all included inventory scripts in the `contrib/inventory "
"directory "
"<https://github.com/ansible/ansible/tree/devel/contrib/inventory>`_. "
"General usage is similar across all inventory scripts. You can also "
":ref:`write your own inventory script <developing_inventory>`."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:323
msgid "Using Inventory Directories and Multiple Inventory Sources"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:325
msgid ""
"If the location given to ``-i`` in Ansible is a directory (or as so "
"configured in ``ansible.cfg``), Ansible can use multiple inventory "
"sources at the same time.  When doing so, it is possible to mix both "
"dynamic and statically managed inventory sources in the same ansible run."
" Instant hybrid cloud!"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:329
msgid ""
"In an inventory directory, executable files will be treated as dynamic "
"inventory sources and most other files as static sources. Files which end"
" with any of the following will be ignored::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:333
msgid ""
"You can replace this list with your own selection by configuring an "
"``inventory_ignore_extensions`` list in ansible.cfg, or setting the "
":envvar:`ANSIBLE_INVENTORY_IGNORE` environment variable. The value in "
"either case should be a comma-separated list of patterns, as shown above."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:335
msgid ""
"Any ``group_vars`` and ``host_vars`` subdirectories in an inventory "
"directory will be interpreted as expected, making inventory directories a"
" powerful way to organize different sets of configurations. See "
":ref:`using_multiple_inventory_sources` for more information."
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:340
msgid "Static Groups of Dynamic Groups"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:342
msgid ""
"When defining groups of groups in the static inventory file, the child "
"groups must also be defined in the static inventory file, or ansible will"
" return an error. If you want to define a static group of dynamic child "
"groups, define the dynamic groups as empty in the static inventory file. "
"For example::"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:359
msgid ":doc:`intro_inventory`"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:360
msgid "All about static inventory files"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:361
msgid "`Mailing List <https://groups.google.com/group/ansible-project>`_"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:362
msgid "Questions? Help? Ideas?  Stop by the list on Google Groups"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:363
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/user_guide/intro_dynamic_inventory.rst:364
msgid "#ansible IRC chat channel"
msgstr ""

