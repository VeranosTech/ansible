# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/playbooks_delegation.rst:4
msgid "Delegation, Rolling Updates, and Local Actions"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:6
msgid "Topics"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:8
msgid ""
"Being designed for multi-tier deployments since the beginning, Ansible is"
" great at doing things on one host on behalf of another, or doing local "
"steps with reference to some remote hosts."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:10
msgid ""
"This in particular is very applicable when setting up continuous "
"deployment infrastructure or zero downtime rolling updates, where you "
"might be talking with load balancers or monitoring systems."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:12
msgid ""
"Additional features allow for tuning the orders in which things complete,"
" and assigning a batch window size for how many machines to process at "
"once during a rolling update."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:14
msgid ""
"This section covers all of these features.  For examples of these items "
"in use, `please see the ansible-examples repository "
"<https://github.com/ansible/ansible-examples/>`_. There are quite a few "
"examples of zero-downtime update procedures for different kinds of "
"applications."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:16
msgid ""
"You should also consult the :ref:`module "
"documentation<modules_by_category>` section. Modules like "
":ref:`ec2_elb<ec2_elb_module>`, :ref:`nagios<nagios_module>`, "
":ref:`bigip_pool<bigip_pool_module>`, and other :ref:`network_modules` "
"dovetail neatly with the concepts mentioned here."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:18
msgid ""
"You'll also want to read up on :ref:`playbooks_reuse_roles`, as the "
"'pre_task' and 'post_task' concepts are the places where you would "
"typically call these modules."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:20
msgid ""
"Be aware that certain tasks are impossible to delegate, i.e. `include`, "
"`add_host`, `debug`, etc as they always execute on the controller."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:26
msgid "Rolling Update Batch Size"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:28
msgid ""
"By default, Ansible will try to manage all of the machines referenced in "
"a play in parallel.  For a rolling update use case, you can define how "
"many hosts Ansible should manage at a single time by using the ``serial``"
" keyword::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:41
msgid ""
"In the above example, if we had 4 hosts in the group 'webservers', 2 "
"would complete the play completely before moving on to the next 2 hosts::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:72
msgid ""
"The ``serial`` keyword can also be specified as a percentage, which will "
"be applied to the total number of hosts in a play, in order to determine "
"the number of hosts per pass::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:79
msgid ""
"If the number of hosts does not divide equally into the number of passes,"
" the final pass will contain the remainder."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:81
msgid ""
"As of Ansible 2.2, the batch sizes can be specified as a list, as "
"follows::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:90
msgid ""
"In the above example, the first batch would contain a single host, the "
"next would contain 5 hosts, and (if there are any hosts left), every "
"following batch would contain 10 hosts until all available hosts are "
"used."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:93
msgid "It is also possible to list multiple batch sizes as percentages::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:102
msgid "You can also mix and match the values::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:112
msgid ""
"No matter how small the percentage, the number of hosts per pass will "
"always be 1 or greater."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:118
msgid "Maximum Failure Percentage"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:120
msgid ""
"By default, Ansible will continue executing actions as long as there are "
"hosts in the batch that have not yet failed. The batch size for a play is"
" determined by the ``serial`` parameter. If ``serial`` is not set, then "
"batch size is all the hosts specified in the ``hosts:`` field. In some "
"situations, such as with the rolling updates described above, it may be "
"desirable to abort the play when a certain threshold of failures have "
"been reached. To achieve this, you can set a maximum failure percentage "
"on a play as follows::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:129
msgid ""
"In the above example, if more than 3 of the 10 servers in the group were "
"to fail, the rest of the play would be aborted."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:133
msgid ""
"The percentage set must be exceeded, not equaled. For example, if serial "
"were set to 4 and you wanted the task to abort when 2 of the systems "
"failed, the percentage should be set at 49 rather than 50."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:139
msgid "Delegation"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:142
msgid ""
"This isn't actually rolling update specific but comes up frequently in "
"those cases."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:144
msgid ""
"If you want to perform a task on one host with reference to other hosts, "
"use the 'delegate_to' keyword on a task. This is ideal for placing nodes "
"in a load balanced pool, or removing them.  It is also very useful for "
"controlling outage windows. Be aware that it does not make sense to "
"delegate all tasks, debug, add_host, include, etc always get executed on "
"the controller. Using this with the 'serial' keyword to control the "
"number of hosts executing at one time is also a good idea::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:170
msgid ""
"These commands will run on 127.0.0.1, which is the machine running "
"Ansible. There is also a shorthand syntax that you can use on a per-task "
"basis: 'local_action'. Here is the same playbook as above, but using the "
"shorthand syntax for delegating to 127.0.0.1::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:186
msgid ""
"A common pattern is to use a local action to call 'rsync' to recursively "
"copy files to the managed servers. Here is an example::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:196
msgid ""
"Note that you must have passphrase-less SSH keys or an ssh-agent "
"configured for this to work, otherwise rsync will need to ask for a "
"passphrase."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:199
msgid ""
"In case you have to specify more arguments you can use the following "
"syntax::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:213
msgid ""
"The `ansible_host` variable (`ansible_ssh_host` in 1.x or specific to "
"ssh/paramiko plugins) reflects the host a task is delegated to."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:218
msgid "Delegated facts"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:220
msgid ""
"By default, any fact gathered by a delegated task are assigned to the "
"`inventory_hostname` (the current host) instead of the host which "
"actually produced the facts (the delegated to host). The directive "
"`delegate_facts` may be set to `True` to assign the task's gathered facts"
" to the delegated host instead of the current one.::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:232
msgid ""
"The above will gather facts for the machines in the dbservers group and "
"assign the facts to those machines and not to app_servers. This way you "
"can lookup `hostvars['dbhost1']['ansible_default_ipv4']['address']` even "
"though dbservers were not part of the play, or left out by using "
"`--limit`."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:239
msgid "Run Once"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:241
msgid ""
"In some cases there may be a need to only run a task one time for a batch"
" of hosts. This can be achieved by configuring \"run_once\" on a task::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:256
msgid ""
"This directive forces the task to attempt execution on the first host in "
"the current batch and then applies all results and facts to all the hosts"
" in the same batch."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:258
msgid "This approach is similar to applying a conditional to a task such as::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:263
msgid "But the results are applied to all the hosts."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:265
msgid ""
"Like most tasks, this can be optionally paired with \"delegate_to\" to "
"specify an individual host to execute on::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:271
msgid ""
"As always with delegation, the action will be executed on the delegated "
"host, but the information is still that of the original host in the task."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:274
msgid ""
"When used together with \"serial\", tasks marked as \"run_once\" will be "
"run on one host in *each* serial batch. If it's crucial that the task is "
"run only once regardless of \"serial\" mode, use :code:`when: "
"inventory_hostname == ansible_play_hosts_all[0]` construct."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:279
msgid ""
"Any conditional (i.e `when:`) will use the variables of the 'first host' "
"to decide if the task runs or not, no other hosts will be tested."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:282
msgid ""
"If you want to avoid the default behaviour of setting the fact for all "
"hosts, set `delegate_facts: True` for the specific task or block."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:287
msgid "Local Playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:289
msgid ""
"It may be useful to use a playbook locally, rather than by connecting "
"over SSH.  This can be useful for assuring the configuration of a system "
"by putting a playbook in a crontab.  This may also be used to run a "
"playbook inside an OS installer, such as an Anaconda kickstart."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:293
msgid ""
"To run an entire playbook locally, just set the \"hosts:\" line to "
"\"hosts: 127.0.0.1\" and then run the playbook like so::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:297
msgid ""
"Alternatively, a local connection can be used in a single playbook play, "
"even if other plays in the playbook use the default remote connection "
"type::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:304
msgid ""
"If you set the connection to local and there is no "
"ansible_python_interpreter set, modules will run under /usr/bin/python "
"and not under {{ ansible_playbook_python }}. Be sure to set "
"ansible_python_interpreter: \"{{ ansible_playbook_python }}\" in "
"host_vars/localhost.yml, for example. You can avoid this issue by using "
"``local_action`` or ``delegate_to: localhost`` instead."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:313
msgid "Interrupt execution on any error"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:315
msgid ""
"With the ''any_errors_fatal'' option, any failure on any host in a multi-"
"host play will be treated as fatal and Ansible will exit immediately "
"without waiting for the other hosts."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:317
#, python-format
msgid ""
"Sometimes ''serial'' execution is unsuitable; the number of hosts is "
"unpredictable (because of dynamic inventory) and speed is crucial "
"(simultaneous execution is required), but all tasks must be 100% "
"successful to continue playbook execution."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:319
msgid ""
"For example, consider a service located in many datacenters with some "
"load balancers to pass traffic from users to the service. There is a "
"deploy playbook to upgrade service deb-packages. The playbook has the "
"stages:"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:321
msgid "disable traffic on load balancers (must be turned off simultaneously)"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:322
msgid "gracefully stop the service"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:323
msgid "upgrade software (this step includes tests and starting the service)"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:324
msgid ""
"enable traffic on the load balancers (which should be turned on "
"simultaneously)"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:326
msgid ""
"The service can't be stopped with \"alive\" load balancers; they must be "
"disabled first. Because of this, the second stage can't be played if any "
"server failed in the first stage."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:328
msgid "For datacenter \"A\", the playbook can be written this way::"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:350
msgid ""
"In this example Ansible will start the software upgrade on the front ends"
" only if all of the load balancers are successfully disabled."
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:354
msgid ":ref:`playbooks_intro`"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:355
msgid "An introduction to playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:356
msgid ""
"`Ansible Examples on GitHub <https://github.com/ansible/ansible-"
"examples>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:357
msgid "Many examples of full-stack deployments"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:358
msgid "`User Mailing List <https://groups.google.com/group/ansible-devel>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:359
msgid "Have a question?  Stop by the google group!"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:360
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_delegation.rst:361
msgid "#ansible IRC chat channel"
msgstr ""

#~ msgid ""
#~ "You should also consult the "
#~ ":doc:`modules` section, various modules like"
#~ " 'ec2_elb', 'nagios', and 'bigip_pool', and"
#~ " 'netscaler' dovetail neatly with the "
#~ "concepts mentioned here."
#~ msgstr ""

#~ msgid ""
#~ "You'll also want to read up on "
#~ ":doc:`playbooks_reuse_roles`, as the 'pre_task' "
#~ "and 'post_task' concepts are the places"
#~ " where you would typically call these"
#~ " modules."
#~ msgstr ""

#~ msgid ""
#~ "When used together with \"serial\", "
#~ "tasks marked as \"run_once\" will be "
#~ "run on one host in *each* serial"
#~ " batch. If it's crucial that the "
#~ "task is run only once regardless "
#~ "of \"serial\" mode, use :code:`when: "
#~ "inventory_hostname == ansible_play_hosts[0]` "
#~ "construct."
#~ msgstr ""

#~ msgid ":doc:`playbooks`"
#~ msgstr ""

