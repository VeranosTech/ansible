# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/playbooks_best_practices.rst:4
msgid "Best Practices"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:6
msgid "Here are some tips for making the most of Ansible and Ansible playbooks."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:8
msgid ""
"You can find some example playbooks illustrating these best practices in "
"our `ansible-examples repository <https://github.com/ansible/ansible-"
"examples>`_.  (NOTE: These may not use all of the features in the latest "
"release, but are still an excellent reference!)."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:10
msgid "Topics"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:15
msgid "Content Organization"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:17
msgid ""
"The following section shows one of many possible ways to organize "
"playbook content."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:19
msgid ""
"Your usage of Ansible should fit your needs, however, not ours, so feel "
"free to modify this approach and organize as you see fit."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:21
msgid ""
"One crucial way to organize your playbook content is Ansible's \"roles\" "
"organization feature, which is documented as part of the main playbooks "
"page.  You should take the time to read and understand the roles "
"documentation which is available here: :doc:`playbooks_reuse_roles`."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:27
msgid "Directory Layout"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:29
msgid ""
"The top level of the directory would contain files and directories like "
"so::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:79
msgid "Alternative Directory Layout"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:81
msgid ""
"Alternatively you can put each inventory file with its "
"``group_vars``/``host_vars`` in a separate directory. This is "
"particularly useful if your ``group_vars``/``host_vars`` don't have that "
"much in common in different environments. The layout could look something"
" like this::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:116
msgid ""
"This layout gives you more flexibility for larger environments, as well "
"as a total separation of inventory variables between different "
"environments. The downside is that it is harder to maintain, because "
"there are more files."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:121
msgid "Use Dynamic Inventory With Clouds"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:123
msgid ""
"If you are using a cloud provider, you should not be managing your "
"inventory in a static file.  See :doc:`intro_dynamic_inventory`."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:125
msgid ""
"This does not just apply to clouds -- If you have another system "
"maintaining a canonical list of systems in your infrastructure, usage of "
"dynamic inventory is a great idea in general."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:131
msgid "How to Differentiate Staging vs Production"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:133
msgid ""
"If managing static inventory, it is frequently asked how to differentiate"
" different types of environments.  The following example shows a good way"
" to do this.  Similar methods of grouping could be adapted to dynamic "
"inventory (for instance, consider applying the AWS tag "
"\"environment:production\", and you'll get a group of systems "
"automatically discovered named \"ec2_tag_environment_production\"."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:137
msgid ""
"Let's show a static inventory example though.  Below, the *production* "
"file contains the inventory of all of your production hosts."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:139
msgid ""
"It is suggested that you define groups based on purpose of the host "
"(roles) and also geography or datacenter location (if applicable)::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:181
msgid "Group And Host Variables"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:183
msgid "This section extends on the previous example."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:185
msgid ""
"Groups are nice for organization, but that's not all groups are good for."
"  You can also assign variables to them!  For instance, atlanta has its "
"own NTP servers, so when setting up ntp.conf, we should use them.  Let's "
"set those now::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:192
msgid ""
"Variables aren't just for geographic information either!  Maybe the "
"webservers have some configuration that doesn't make sense for the "
"database servers::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:199
msgid ""
"If we had any default values, or values that were universally true, we "
"would put them in a file called group_vars/all::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:206
msgid ""
"We can define specific hardware variance in systems in a host_vars file, "
"but avoid doing this unless you need to::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:213
msgid ""
"Again, if we are using dynamic inventory sources, many dynamic groups are"
" automatically created.  So a tag like \"class:webserver\" would load in "
"variables from the file \"group_vars/ec2_tag_class_webserver\" "
"automatically."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:219
msgid "Top Level Playbooks Are Separated By Role"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:221
msgid ""
"In site.yml, we import a playbook that defines our entire infrastructure."
"  This is a very short example, because it's just importing some other "
"playbooks::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:229
msgid ""
"In a file like webservers.yml (also at the top level), we map the "
"configuration of the webservers group to the roles performed by the "
"webservers group::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:238
msgid ""
"The idea here is that we can choose to configure our whole infrastructure"
" by \"running\" site.yml or we could just choose to run a subset by "
"running webservers.yml.  This is analogous to the \"--limit\" parameter "
"to ansible but a little more explicit::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:247
msgid "Task And Handler Organization For A Role"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:249
msgid ""
"Below is an example tasks file that explains how a role works.  Our "
"common role here just sets up NTP, but it could do more if we wanted::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:275
msgid ""
"Here is an example handlers file.  As a review, handlers are only fired "
"when certain tasks report changes, and are run at the end of each play::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:285
msgid "See :doc:`playbooks_reuse_roles` for more information."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:291
msgid "What This Organization Enables (Examples)"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:293
msgid "Above we've shared our basic organizational structure."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:295
msgid ""
"Now what sort of use cases does this layout enable?  Lots!  If I want to "
"reconfigure my whole infrastructure, it's just::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:299
msgid "To reconfigure NTP on everything::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:303
msgid "To reconfigure just my webservers::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:307
msgid "For just my webservers in Boston::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:311
msgid "For just the first 10, and then the next 10::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:316
msgid "And of course just basic ad-hoc stuff is also possible::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:321
msgid "And there are some useful commands to know::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:332
msgid "Deployment vs Configuration Organization"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:334
msgid ""
"The above setup models a typical configuration topology.  When doing "
"multi-tier deployments, there are going to be some additional playbooks "
"that hop between tiers to roll out an application.  In this case, "
"'site.yml' may be augmented by playbooks like 'deploy_exampledotcom.yml' "
"but the general concepts can still apply."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:338
msgid ""
"Consider \"playbooks\" as a sports metaphor -- you don't have to just "
"have one set of plays to use against your infrastructure all the time -- "
"you can have situational plays that you use at different times and for "
"different purposes."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:341
msgid ""
"Ansible allows you to deploy and configure using the same tool, so you "
"would likely reuse groups and just keep the OS configuration in separate "
"playbooks from the app deployment."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:347
msgid "Staging vs Production"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:349
msgid ""
"As also mentioned above, a good way to keep your staging (or testing) and"
" production environments separate is to use a separate inventory file for"
" staging and production.   This way you pick with -i what you are "
"targeting.  Keeping them all in one file can lead to surprises!"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:351
msgid ""
"Testing things in a staging environment before trying in production is "
"always a great idea.  Your environments need not be the same size and you"
" can use group variables to control the differences between those "
"environments."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:357
msgid "Rolling Updates"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:359
msgid ""
"Understand the 'serial' keyword.  If updating a webserver farm you really"
" want to use it to control how many machines you are updating at once in "
"the batch."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:362
msgid "See :doc:`playbooks_delegation`."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:367
msgid "Always Mention The State"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:369
msgid ""
"The 'state' parameter is optional to a lot of modules.  Whether "
"'state=present' or 'state=absent', it's always best to leave that "
"parameter in your playbooks to make it clear, especially as some modules "
"support additional states."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:375
msgid "Group By Roles"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:377
msgid ""
"We're somewhat repeating ourselves with this tip, but it's worth "
"repeating. A system can be in multiple groups.  See "
":doc:`intro_inventory` and :doc:`intro_patterns`.   Having groups named "
"after things like *webservers* and *dbservers* is repeated in the "
"examples because it's a very powerful concept."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:380
msgid ""
"This allows playbooks to target machines based on role, as well as to "
"assign role specific variables using the group variable system."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:383
msgid "See :doc:`playbooks_reuse_roles`."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:388
msgid "Operating System and Distribution Variance"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:390
msgid ""
"When dealing with a parameter that is different between two different "
"operating systems, a great way to handle this is by using the group_by "
"module."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:393
msgid ""
"This makes a dynamic group of hosts matching certain criteria, even if "
"that group is not defined in the inventory file::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:411
msgid ""
"This will throw all systems into a dynamic group based on the operating "
"system name."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:413
msgid ""
"If group-specific settings are needed, this can also be done. For "
"example::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:423
msgid ""
"In the above example, CentOS machines get the value of '42' for asdf, but"
" other machines get '10'. This can be used not only to set variables, but"
" also to apply certain roles to only certain systems."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:426
msgid "Alternatively, if only variables are needed::"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:435
msgid "This will pull in variables based on the OS name."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:440
msgid "Bundling Ansible Modules With Playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:442
msgid ""
"If a playbook has a :file:`./library` directory relative to its YAML "
"file, this directory can be used to add ansible modules that will "
"automatically be in the ansible module path.  This is a great way to keep"
" modules that go with a playbook together.  This is shown in the "
"directory structure example at the start of this section."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:449
msgid "Whitespace and Comments"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:451
msgid ""
"Generous use of whitespace to break things up, and use of comments (which"
" start with '#'), is encouraged."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:456
msgid "Always Name Tasks"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:458
msgid ""
"It is possible to leave off the 'name' for a given task, though it is "
"recommended to provide a description about why something is being done "
"instead.  This name is shown when the playbook is run."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:464
msgid "Keep It Simple"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:466
msgid ""
"When you can do something simply, do something simply.  Do not reach to "
"use every feature of Ansible together, all at once.  Use what works for "
"you.  For example, you will probably not need ``vars``, ``vars_files``, "
"``vars_prompt`` and ``--extra-vars`` all at once, while also using an "
"external inventory file."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:472
msgid ""
"If something feels complicated, it probably is, and may be a good "
"opportunity to simplify things."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:477
msgid "Version Control"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:479
msgid ""
"Use version control.  Keep your playbooks and inventory file in git (or "
"another version control system), and commit when you make changes to "
"them.  This way you have an audit trail describing when and why you "
"changed the rules that are automating your infrastructure."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:487
msgid "Variables and Vaults"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:489
msgid ""
"For general maintenance, it is often easier to use ``grep``, or similar "
"tools, to find variables in your Ansible setup. Since vaults obscure "
"these variables, it is best to work with a layer of indirection. When "
"running a playbook, Ansible finds the variables in the unencrypted file "
"and all sensitive variables come from the encrypted file."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:491
msgid ""
"A best practice approach for this is to start with a ``group_vars/`` "
"subdirectory named after the group. Inside of this subdirectory, create "
"two files named ``vars`` and ``vault``. Inside of the ``vars`` file, "
"define all of the variables needed, including any sensitive ones. Next, "
"copy all of the sensitive variables over to the ``vault`` file and prefix"
" these variables with ``vault_``. You should adjust the variables in the "
"``vars`` file to point to the matching ``vault_`` variables using jinja2 "
"syntax, and ensure that the ``vault`` file is vault encrypted."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:493
msgid ""
"This best practice has no limit on the amount of variable and vault files"
" or their names."
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:498
msgid ":ref:`yaml_syntax`"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:499
msgid "Learn about YAML syntax"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:500
msgid ":ref:`working_with_playbooks`"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:501
msgid "Review the basic playbook features"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:502
msgid ":ref:`all_modules`"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:503
msgid "Learn about available modules"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:504
msgid ":ref:`developing_modules`"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:505
msgid "Learn how to extend Ansible by writing your own modules"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:506
msgid ":ref:`intro_patterns`"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:507
msgid "Learn about how to select hosts"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:508
msgid "`GitHub examples directory <https://github.com/ansible/ansible-examples>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:509
msgid "Complete playbook files from the github project source"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:510
msgid "`Mailing List <https://groups.google.com/group/ansible-project>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_best_practices.rst:511
msgid "Questions? Help? Ideas?  Stop by the list on Google Groups"
msgstr ""

