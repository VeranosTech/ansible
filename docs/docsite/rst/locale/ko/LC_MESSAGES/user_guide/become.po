# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/become.rst:5
msgid "Understanding Privilege Escalation"
msgstr ""

#: ../../rst/user_guide/become.rst:7
msgid ""
"Ansible can use existing privilege escalation systems to allow a user to "
"execute tasks as another."
msgstr ""

#: ../../rst/user_guide/become.rst:9
msgid "Topics"
msgstr ""

#: ../../rst/user_guide/become.rst:12
msgid "Become"
msgstr ""

#: ../../rst/user_guide/become.rst:14
msgid ""
"Ansible allows you to 'become' another user, different from the user that"
" logged into the machine (remote user). This is done using existing "
"privilege escalation tools such as `sudo`, `su`, `pfexec`, `doas`, "
"`pbrun`, `dzdo`, `ksu`, `runas`, `machinectl` and others."
msgstr ""

#: ../../rst/user_guide/become.rst:17
msgid ""
"Prior to version 1.9, Ansible mostly allowed the use of `sudo` and a "
"limited use of `su` to allow a login/remote user to become a different "
"user and execute tasks and create resources with the second user's "
"permissions. As of Ansible version 1.9,  `become` supersedes the old "
"sudo/su, while still being backwards compatible. This new implementation "
"also makes it easier to add other privilege escalation tools, including "
"`pbrun` (Powerbroker), `pfexec`, `dzdo` (Centrify), and others."
msgstr ""

#: ../../rst/user_guide/become.rst:19
msgid ""
"Become vars and directives are independent. For example, setting "
"``become_user`` does not set ``become``."
msgstr ""

#: ../../rst/user_guide/become.rst:23
msgid "Directives"
msgstr ""

#: ../../rst/user_guide/become.rst:25
msgid ""
"These can be set from play to task level, but are overridden by "
"connection variables as they can be host specific."
msgstr ""

#: ../../rst/user_guide/become.rst:28
msgid "become"
msgstr ""

#: ../../rst/user_guide/become.rst:28
msgid "set to ``yes`` to activate privilege escalation."
msgstr ""

#: ../../rst/user_guide/become.rst:31
msgid "become_user"
msgstr ""

#: ../../rst/user_guide/become.rst:31
msgid ""
"set to user with desired privileges â€” the user you `become`, NOT the user"
" you login as. Does NOT imply ``become: yes``, to allow it to be set at "
"host level."
msgstr ""

#: ../../rst/user_guide/become.rst:34
msgid "become_method"
msgstr ""

#: ../../rst/user_guide/become.rst:34
msgid ""
"(at play or task level) overrides the default method set in ansible.cfg, "
"set to "
"`sudo`/`su`/`pbrun`/`pfexec`/`doas`/`dzdo`/`ksu`/`runas`/`machinectl`"
msgstr ""

#: ../../rst/user_guide/become.rst:37
msgid "become_flags"
msgstr ""

#: ../../rst/user_guide/become.rst:37
msgid ""
"(at play or task level) permit the use of specific flags for the tasks or"
" role. One common use is to change the user to nobody when the shell is "
"set to no login. Added in Ansible 2.2."
msgstr ""

#: ../../rst/user_guide/become.rst:39
msgid ""
"For example, to manage a system service (which requires ``root`` "
"privileges) when connected as a non-``root`` user (this takes advantage "
"of the fact that the default value of ``become_user`` is ``root``)::"
msgstr ""

#: ../../rst/user_guide/become.rst:47
msgid "To run a command as the ``apache`` user::"
msgstr ""

#: ../../rst/user_guide/become.rst:54
msgid "To do something as the ``nobody`` user when the shell is nologin::"
msgstr ""

#: ../../rst/user_guide/become.rst:64
msgid "Connection variables"
msgstr ""

#: ../../rst/user_guide/become.rst:65
msgid ""
"Each allows you to set an option per group and/or host, these are "
"normally defined in inventory but can be used as normal variables."
msgstr ""

#: ../../rst/user_guide/become.rst:68
msgid "ansible_become"
msgstr ""

#: ../../rst/user_guide/become.rst:68
msgid ""
"equivalent of the become directive, decides if privilege escalation is "
"used or not."
msgstr ""

#: ../../rst/user_guide/become.rst:71
msgid "ansible_become_method"
msgstr ""

#: ../../rst/user_guide/become.rst:71
msgid "which privilege escalation method should be used"
msgstr ""

#: ../../rst/user_guide/become.rst:74
msgid "ansible_become_user"
msgstr ""

#: ../../rst/user_guide/become.rst:74
msgid ""
"set the user you become through privilege escalation; does not imply "
"``ansible_become: yes``"
msgstr ""

#: ../../rst/user_guide/become.rst:77
msgid "ansible_become_pass"
msgstr ""

#: ../../rst/user_guide/become.rst:77
msgid ""
"set the privilege escalation password. See :doc:`playbooks_vault` for "
"details on how to avoid having secrets in plain text"
msgstr ""

#: ../../rst/user_guide/become.rst:79
msgid ""
"For example, if you want to run all tasks as ``root`` on a server named "
"``webserver``, but you can only connect as the ``manager`` user, you "
"could use an inventory entry like this::"
msgstr ""

#: ../../rst/user_guide/become.rst:84
msgid "Command line options"
msgstr ""

#: ../../rst/user_guide/become.rst:87
msgid ""
"ask for privilege escalation password; does not imply become will be "
"used. Note that this password will be used for all hosts."
msgstr ""

#: ../../rst/user_guide/become.rst:90
msgid "run operations with become (no password implied)"
msgstr ""

#: ../../rst/user_guide/become.rst:93
msgid ""
"privilege escalation method to use (default=sudo), valid choices: [ sudo "
"| su | pbrun | pfexec | doas | dzdo | ksu | runas | machinectl ]"
msgstr ""

#: ../../rst/user_guide/become.rst:97
msgid "run operations as this user (default=root), does not imply --become/-b"
msgstr ""

#: ../../rst/user_guide/become.rst:101
msgid "For those from Pre 1.9 , sudo and su still work!"
msgstr ""

#: ../../rst/user_guide/become.rst:103
msgid ""
"For those using old playbooks will not need to be changed, even though "
"they are deprecated, sudo and su directives, variables and options will "
"continue to work. It is recommended to move to become as they may be "
"retired at one point. You cannot mix directives on the same object "
"(become and sudo) though, Ansible will complain if you try to."
msgstr ""

#: ../../rst/user_guide/become.rst:107
msgid ""
"Become will default to using the old sudo/su configs and variables if "
"they exist, but will override them if you specify any of the new ones."
msgstr ""

#: ../../rst/user_guide/become.rst:111 ../../rst/user_guide/become.rst:679
msgid "Limitations"
msgstr ""

#: ../../rst/user_guide/become.rst:113
msgid ""
"Although privilege escalation is mostly intuitive, there are a few "
"limitations on how it works.  Users should be aware of these to avoid "
"surprises."
msgstr ""

#: ../../rst/user_guide/become.rst:117
msgid "Becoming an Unprivileged User"
msgstr ""

#: ../../rst/user_guide/become.rst:119
msgid ""
"Ansible 2.0.x and below has a limitation with regards to becoming an "
"unprivileged user that can be a security risk if users are not aware of "
"it. Ansible modules are executed on the remote machine by first "
"substituting the parameters into the module file, then copying the file "
"to the remote machine, and finally executing it there."
msgstr ""

#: ../../rst/user_guide/become.rst:125
msgid ""
"Everything is fine if the module file is executed without using "
"``become``, when the ``become_user`` is root, or when the connection to "
"the remote machine is made as root.  In these cases the module file is "
"created with permissions that only allow reading by the user and root."
msgstr ""

#: ../../rst/user_guide/become.rst:130
msgid ""
"The problem occurs when the ``become_user`` is an unprivileged user.  "
"Ansible 2.0.x and below make the module file world readable in this case,"
" as the module file is written as the user that Ansible connects as, but "
"the file needs to be readable by the user Ansible is set to ``become``."
msgstr ""

#: ../../rst/user_guide/become.rst:135
msgid ""
"In Ansible 2.1, this window is further narrowed: If the connection is "
"made as a privileged user (root), then Ansible 2.1 and above will use "
"chown to set the file's owner to the unprivileged user being switched to."
" This means both the user making the connection and the user being "
"switched to via ``become`` must be unprivileged in order to trigger this "
"problem."
msgstr ""

#: ../../rst/user_guide/become.rst:141
msgid ""
"If any of the parameters passed to the module are sensitive in nature, "
"then those pieces of data are located in a world readable module file for"
" the duration of the Ansible module execution.  Once the module is done "
"executing, Ansible will delete the temporary file.  If you trust the "
"client machines then there's no problem here.  If you do not trust the "
"client machines then this is a potential danger."
msgstr ""

#: ../../rst/user_guide/become.rst:148
msgid "Ways to resolve this include:"
msgstr ""

#: ../../rst/user_guide/become.rst:150
msgid ""
"Use `pipelining`.  When pipelining is enabled, Ansible doesn't save the "
"module to a temporary file on the client.  Instead it pipes the module to"
" the remote python interpreter's stdin. Pipelining does not work for "
"python modules involving file transfer (for example: :ref:`copy "
"<copy_module>`, :ref:`fetch <fetch_module>`, :ref:`template "
"<template_module>`), or for non-python modules."
msgstr ""

#: ../../rst/user_guide/become.rst:156
msgid ""
"(Available in Ansible 2.1) Install POSIX.1e filesystem acl support on the"
" managed host.  If the temporary directory on the remote host is mounted "
"with POSIX acls enabled and the :command:`setfacl` tool is in the remote "
"``PATH`` then Ansible will use POSIX acls to share the module file with "
"the second unprivileged user instead of having to make the file readable "
"by everyone."
msgstr ""

#: ../../rst/user_guide/become.rst:162
msgid ""
"Don't perform an action on the remote machine by becoming an unprivileged"
" user.  Temporary files are protected by UNIX file permissions when you "
"``become`` root or do not use ``become``.  In Ansible 2.1 and above, UNIX"
" file permissions are also secure if you make the connection to the "
"managed machine as root and then use ``become`` to an unprivileged "
"account."
msgstr ""

#: ../../rst/user_guide/become.rst:168
msgid ""
"Although the Solaris ZFS filesystem has filesystem ACLs, the ACLs are not"
" POSIX.1e filesystem acls (they are NFSv4 ACLs instead).  Ansible cannot "
"use these ACLs to manage its temp file permissions so you may have to "
"resort to ``allow_world_readable_tmpfiles`` if the remote machines use "
"ZFS."
msgstr ""

#: ../../rst/user_guide/become.rst:175
msgid ""
"In addition to the additional means of doing this securely, Ansible 2.1 "
"also makes it harder to unknowingly do this insecurely.  Whereas in "
"Ansible 2.0.x and below, Ansible will silently allow the insecure "
"behaviour if it was unable to find another way to share the files with "
"the unprivileged user, in Ansible 2.1 and above Ansible defaults to "
"issuing an error if it can't do this securely.  If you can't make any of "
"the changes above to resolve the problem, and you decide that the machine"
" you're running on is secure enough for the modules you want to run there"
" to be world readable, you can turn on ``allow_world_readable_tmpfiles`` "
"in the :file:`ansible.cfg` file.  Setting "
"``allow_world_readable_tmpfiles`` will change this from an error into a "
"warning and allow the task to run as it did prior to 2.1."
msgstr ""

#: ../../rst/user_guide/become.rst:188
msgid "Connection Plugin Support"
msgstr ""

#: ../../rst/user_guide/become.rst:190
msgid ""
"Privilege escalation methods must also be supported by the connection "
"plugin used.   Most connection plugins will warn if they do not support "
"become.  Some will just ignore it as they always run as root (jail, "
"chroot, etc)."
msgstr ""

#: ../../rst/user_guide/become.rst:195
msgid "Only one method may be enabled per host"
msgstr ""

#: ../../rst/user_guide/become.rst:197
msgid ""
"Methods cannot be chained.  You cannot use ``sudo /bin/su -`` to become a"
" user, you need to have privileges to run the command as that user in "
"sudo or be able to su directly to it (the same for pbrun, pfexec or other"
" supported methods)."
msgstr ""

#: ../../rst/user_guide/become.rst:202
msgid "Can't limit escalation to certain commands"
msgstr ""

#: ../../rst/user_guide/become.rst:204
msgid ""
"Privilege escalation permissions have to be general.  Ansible does not "
"always use a specific command to do something but runs modules (code) "
"from a temporary file name which changes every time.  If you have "
"'/sbin/service' or '/bin/chmod' as the allowed commands this will fail "
"with ansible as those paths won't match with the temporary file that "
"ansible creates to run the module."
msgstr ""

#: ../../rst/user_guide/become.rst:212
msgid "Environment variables populated by pam_systemd"
msgstr ""

#: ../../rst/user_guide/become.rst:214
msgid ""
"For most Linux distributions using ``systemd`` as their init, the default"
" methods used by ``become`` do not open a new \"session\", in the sense "
"of systemd.  Because the ``pam_systemd`` module will not fully initialize"
" a new session, you might have surprises compared to a normal session "
"opened through ssh: some environment variables set by ``pam_systemd``, "
"most notably ``XDG_RUNTIME_DIR``, are not populated for the new user and "
"instead inherited or just emptied."
msgstr ""

#: ../../rst/user_guide/become.rst:222
msgid ""
"This might cause trouble when trying to invoke systemd commands that "
"depend on ``XDG_RUNTIME_DIR`` to access the bus:"
msgstr ""

#: ../../rst/user_guide/become.rst:232
msgid ""
"To force ``become`` to open a new systemd session that goes through "
"``pam_systemd``, you can use ``become_method: machinectl``."
msgstr ""

#: ../../rst/user_guide/become.rst:235
msgid ""
"For more information, see `this systemd issue "
"<https://github.com/systemd/systemd/issues/825#issuecomment-127917622>`_."
msgstr ""

#: ../../rst/user_guide/become.rst:241
msgid "Become and Networks"
msgstr ""

#: ../../rst/user_guide/become.rst:243
msgid ""
"As of version 2.6, Ansible supports ``become`` for privilege escalation "
"(entering ``enable`` mode or privileged EXEC mode) on all :ref:`Ansible-"
"maintained platforms<network_supported>` that support ``enable`` mode: "
"`eos``, ``ios``, and ``nxos``. Using ``become`` replaces the "
"``authorize`` and ``auth_pass`` options in a ``provider`` dictionary."
msgstr ""

#: ../../rst/user_guide/become.rst:245
msgid ""
"You must set the connection type to either ``connection: network_cli`` or"
" ``connection: httpapi`` to use ``become`` for privilege escalation on "
"network devices. Check the :ref:`platform_options` and "
":ref:`network_modules` documentation for details."
msgstr ""

#: ../../rst/user_guide/become.rst:247
msgid ""
"You can use escalated privileges on only the specific tasks that need "
"them, on an entire play, or on all plays. Adding ``become: yes`` and "
"``become_method: enable`` instructs Ansible to enter ``enable`` mode "
"before executing the task, play, or playbook where those parameters are "
"set."
msgstr ""

#: ../../rst/user_guide/become.rst:249
msgid ""
"If you see this error message, the task that generated it requires "
"``enable`` mode to succeed:"
msgstr ""

#: ../../rst/user_guide/become.rst:255
msgid ""
"To set ``enable`` mode for a specific task, add ``become`` at the task "
"level:"
msgstr ""

#: ../../rst/user_guide/become.rst:266
msgid ""
"To set enable mode for all tasks in a single play, add ``become`` at the "
"play level:"
msgstr ""

#: ../../rst/user_guide/become.rst:280
msgid "Setting enable mode for all tasks"
msgstr ""

#: ../../rst/user_guide/become.rst:282
msgid ""
"Often you wish for all tasks in all plays to run using privilege mode, "
"that is best achieved by using ``group_vars``:"
msgstr ""

#: ../../rst/user_guide/become.rst:284
msgid "**group_vars/eos.yml**"
msgstr ""

#: ../../rst/user_guide/become.rst:296
msgid "Passwords for enable mode"
msgstr ""

#: ../../rst/user_guide/become.rst:298
msgid ""
"If you need a password to enter ``enable`` mode, you can specify it in "
"one of two ways:"
msgstr ""

#: ../../rst/user_guide/become.rst:300
msgid ""
"providing the :option:`--ask-become-pass <ansible-playbook --ask-become-"
"pass>` command line option"
msgstr ""

#: ../../rst/user_guide/become.rst:301
msgid "setting the ``ansible_become_pass`` connection variable"
msgstr ""

#: ../../rst/user_guide/become.rst:305
msgid ""
"As a reminder passwords should never be stored in plain text. For "
"information on encrypting your passwords and other secrets with Ansible "
"Vault, see :doc:`playbooks_vault`."
msgstr ""

#: ../../rst/user_guide/become.rst:308
msgid "authorize and auth_pass"
msgstr ""

#: ../../rst/user_guide/become.rst:310
msgid ""
"Ansible still supports ``enable`` mode with ``connection: local`` for "
"legacy playbooks. To enter ``enable`` mode with ``connection: local``, "
"use the module options ``authorize`` and ``auth_pass``:"
msgstr ""

#: ../../rst/user_guide/become.rst:325
msgid ""
"We recommend updating your playbooks to use ``become`` for network-device"
" ``enable`` mode consistently. The use of ``authorize`` and of "
"``provider`` dictionaries will be deprecated in future. Check the "
":ref:`platform_options` and :ref:`network_modules` documentation for "
"details."
msgstr ""

#: ../../rst/user_guide/become.rst:330
msgid "Become and Windows"
msgstr ""

#: ../../rst/user_guide/become.rst:332
msgid ""
"Since Ansible 2.3, ``become`` can be used on Windows hosts through the "
"``runas`` method. Become on Windows uses the same inventory setup and "
"invocation arguments as ``become`` on a non-Windows host, so the setup "
"and variable names are the same as what is defined in this document."
msgstr ""

#: ../../rst/user_guide/become.rst:337
msgid ""
"While ``become`` can be used to assume the identity of another user, "
"there are other uses for it with Windows hosts. One important use is to "
"bypass some of the limitations that are imposed when running on WinRM, "
"such as constrained network delegation or accessing forbidden system "
"calls like the WUA API. You can use ``become`` with the same user as "
"``ansible_user`` to bypass these limitations and run commands that are "
"not normally accessible in a WinRM session."
msgstr ""

#: ../../rst/user_guide/become.rst:345
msgid "Administrative Rights"
msgstr ""

#: ../../rst/user_guide/become.rst:347
msgid ""
"Many tasks in Windows require administrative privileges to complete. When"
" using the ``runas`` become method, Ansible will attempt to run the "
"module with the full privileges that are available to the remote user. If"
" it fails to elevate the user token, it will continue to use the limited "
"token during execution."
msgstr ""

#: ../../rst/user_guide/become.rst:352
msgid ""
"A user must have the ``SeDebugPrivilege`` to run a become process with "
"elevated privileges. This privilege is assigned to Administrators by "
"default. If the debug privilege is not available, the become process will"
" run with a limited set of privileges and groups."
msgstr ""

#: ../../rst/user_guide/become.rst:357
msgid ""
"To determine the type of token that Ansible was able to get, run the "
"following task::"
msgstr ""

#: ../../rst/user_guide/become.rst:363
msgid "The output will look something similar to the below:"
msgstr ""

#: ../../rst/user_guide/become.rst:451
msgid ""
"Under the ``label`` key, the ``account_name`` entry determines whether "
"the user has Administrative rights. Here are the labels that can be "
"returned and what they represent:"
msgstr ""

#: ../../rst/user_guide/become.rst:455
msgid ""
"``Medium``: Ansible failed to get an elevated token and ran under a "
"limited token. Only a subset of the privileges assigned to user are "
"available during the module execution and the user does not have "
"administrative rights."
msgstr ""

#: ../../rst/user_guide/become.rst:459
msgid ""
"``High``: An elevated token was used and all the privileges assigned to "
"the user are available during the module execution."
msgstr ""

#: ../../rst/user_guide/become.rst:462
msgid ""
"``System``: The ``NT AUTHORITY\\System`` account is used and has the "
"highest level of privileges available."
msgstr ""

#: ../../rst/user_guide/become.rst:465
msgid ""
"The output will also show the list of privileges that have been granted "
"to the user. When the privilege value is ``disabled``, the privilege is "
"assigned to the logon token but has not been enabled. In most scenarios "
"these privileges are automatically enabled when required."
msgstr ""

#: ../../rst/user_guide/become.rst:470
msgid ""
"If running on a version of Ansible that is older than 2.5 or the normal "
"``runas`` escalation process fails, an elevated token can be retrieved "
"by:"
msgstr ""

#: ../../rst/user_guide/become.rst:473
msgid ""
"Set the ``become_user`` to ``System`` which has full control over the "
"operating system."
msgstr ""

#: ../../rst/user_guide/become.rst:476
msgid ""
"Grant ``SeTcbPrivilege`` to the user Ansible connects with on WinRM. "
"``SeTcbPrivilege`` is a high-level privilege that grants full control "
"over the operating system. No user is given this privilege by default, "
"and care should be taken if you grant this privilege to a user or group. "
"For more information on this privilege, please see `Act as part of the "
"operating system <https://docs.microsoft.com/en-us/previous-"
"versions/windows/it-pro/windows-"
"server-2012-R2-and-2012/dn221957(v=ws.11)>`_. You can use the below task "
"to set this privilege on a Windows host::"
msgstr ""

#: ../../rst/user_guide/become.rst:490
msgid ""
"Turn UAC off on the host and reboot before trying to become the user. UAC"
" is a security protocol that is designed to run accounts with the ``least"
" privilege`` principle. You can turn UAC off by running the following "
"tasks::"
msgstr ""

#: ../../rst/user_guide/become.rst:508
msgid ""
"Granting the ``SeTcbPrivilege`` or turning UAC off can cause Windows "
"security vulnerabilities and care should be given if these steps are "
"taken."
msgstr ""

#: ../../rst/user_guide/become.rst:512
msgid "Local Service Accounts"
msgstr ""

#: ../../rst/user_guide/become.rst:514
msgid ""
"Prior to Ansible version 2.5, ``become`` only worked with a local or "
"domain user account. Local service accounts like ``System`` or "
"``NetworkService`` could not be used as ``become_user`` in these older "
"versions. This restriction has been lifted since the 2.5 release of "
"Ansible. The three service accounts that can be set under ``become_user``"
" are:"
msgstr ""

#: ../../rst/user_guide/become.rst:520
msgid "System"
msgstr ""

#: ../../rst/user_guide/become.rst:521
msgid "NetworkService"
msgstr ""

#: ../../rst/user_guide/become.rst:522
msgid "LocalService"
msgstr ""

#: ../../rst/user_guide/become.rst:524
msgid ""
"Because local service accounts do not have passwords, the "
"``ansible_become_password`` parameter is not required and is ignored if "
"specified."
msgstr ""

#: ../../rst/user_guide/become.rst:529
msgid "Become without setting a Password"
msgstr ""

#: ../../rst/user_guide/become.rst:531
msgid ""
"As of Ansible 2.8, ``become`` can be used to become a local or domain "
"account without requiring a password for that account. For this method to"
" work, the following requirements must be met:"
msgstr ""

#: ../../rst/user_guide/become.rst:535
msgid "The connection user has the ``SeDebugPrivilege`` privilege assigned"
msgstr ""

#: ../../rst/user_guide/become.rst:536
msgid "The connection user is part of the ``BUILTIN\\Administrators`` group"
msgstr ""

#: ../../rst/user_guide/become.rst:537
msgid ""
"The ``become_user`` has either the ``SeBatchLogonRight`` or "
"``SeNetworkLogonRight`` user right"
msgstr ""

#: ../../rst/user_guide/become.rst:539
msgid ""
"Using become without a password is achieved in one of two different "
"methods:"
msgstr ""

#: ../../rst/user_guide/become.rst:541
msgid ""
"Duplicating an existing logon session's token if the account is already "
"logged on"
msgstr ""

#: ../../rst/user_guide/become.rst:542
msgid "Using S4U to generate a logon token that is valid on the remote host only"
msgstr ""

#: ../../rst/user_guide/become.rst:544
msgid ""
"In the first scenario, the become process is spawned from another logon "
"of that user account. This could be an existing RDP logon, console logon,"
" but this is not guaranteed to occur all the time. This is similar to the"
" ``Run only when user is logged on`` option for a Scheduled Task."
msgstr ""

#: ../../rst/user_guide/become.rst:549
msgid ""
"In the case where another logon of the become account does not exist, S4U"
" is used to create a new logon and run the module through that. This is "
"similar to the ``Run whether user is logged on or not`` with the ``Do not"
" store password`` option for a Scheduled Task. In this scenario, the "
"become process will not be able to access any network resources like a "
"normal WinRM process."
msgstr ""

#: ../../rst/user_guide/become.rst:555
msgid ""
"To make a distinction between using become with no password and becoming "
"an account that has no password make sure to keep ``ansible_become_pass``"
" as undefined or set ``ansible_become_pass:``."
msgstr ""

#: ../../rst/user_guide/become.rst:559
msgid ""
"Because there are no guarantees an existing token will exist for a user "
"when Ansible runs, there's a high change the become process will only "
"have access to local resources. Use become with a password if the task "
"needs to access network resources"
msgstr ""

#: ../../rst/user_guide/become.rst:565
msgid "Accounts without a Password"
msgstr ""

#: ../../rst/user_guide/become.rst:567
msgid ""
"As a general security best practice, you should avoid allowing accounts "
"without passwords."
msgstr ""

#: ../../rst/user_guide/become.rst:569
msgid ""
"Ansible can be used to become an account that does not have a password "
"(like the ``Guest`` account). To become an account without a password, "
"set up the variables like normal but set ``ansible_become_pass: ''``."
msgstr ""

#: ../../rst/user_guide/become.rst:573
msgid ""
"Before become can work on an account like this, the local policy "
"`Accounts: Limit local account use of blank passwords to console logon "
"only <https://docs.microsoft.com/en-us/previous-versions/windows/it-pro"
"/windows-server-2012-R2-and-2012/jj852174(v=ws.11)>`_ must be disabled. "
"This can either be done through a Group Policy Object (GPO) or with this "
"Ansible task:"
msgstr ""

#: ../../rst/user_guide/become.rst:588
msgid ""
"This is only for accounts that do not have a password. You still need to "
"set the account's password under ``ansible_become_pass`` if the "
"become_user has a password."
msgstr ""

#: ../../rst/user_guide/become.rst:593
msgid "Become Flags"
msgstr ""

#: ../../rst/user_guide/become.rst:594
msgid ""
"Ansible 2.5 adds the ``become_flags`` parameter to the ``runas`` become "
"method. This parameter can be set using the ``become_flags`` task "
"directive or set in Ansible's configuration using "
"``ansible_become_flags``. The two valid values that are initially "
"supported for this parameter are ``logon_type`` and ``logon_flags``."
msgstr ""

#: ../../rst/user_guide/become.rst:601
msgid ""
"These flags should only be set when becoming a normal user account, not a"
" local service account like LocalSystem."
msgstr ""

#: ../../rst/user_guide/become.rst:603
msgid ""
"The key ``logon_type`` sets the type of logon operation to perform. The "
"value can be set to one of the following:"
msgstr ""

#: ../../rst/user_guide/become.rst:606
msgid ""
"``interactive``: The default logon type. The process will be run under a "
"context that is the same as when running a process locally. This bypasses"
" all WinRM restrictions and is the recommended method to use."
msgstr ""

#: ../../rst/user_guide/become.rst:610
msgid ""
"``batch``: Runs the process under a batch context that is similar to a "
"scheduled task with a password set. This should bypass most WinRM "
"restrictions and is useful if the ``become_user`` is not allowed to log "
"on interactively."
msgstr ""

#: ../../rst/user_guide/become.rst:615
msgid ""
"``new_credentials``: Runs under the same credentials as the calling user,"
" but outbound connections are run under the context of the "
"``become_user`` and ``become_password``, similar to ``runas.exe "
"/netonly``. The ``logon_flags`` flag should also be set to "
"``netcredentials_only``. Use this flag if the process needs to access a "
"network resource (like an SMB share) using a different set of "
"credentials."
msgstr ""

#: ../../rst/user_guide/become.rst:622
msgid ""
"``network``: Runs the process under a network context without any cached "
"credentials. This results in the same type of logon session as running a "
"normal WinRM process without credential delegation, and operates under "
"the same restrictions."
msgstr ""

#: ../../rst/user_guide/become.rst:627
msgid ""
"``network_cleartext``: Like the ``network`` logon type, but instead "
"caches the credentials so it can access network resources. This is the "
"same type of logon session as running a normal WinRM process with "
"credential delegation."
msgstr ""

#: ../../rst/user_guide/become.rst:631
msgid ""
"For more information, see `dwLogonType <https://docs.microsoft.com/en-"
"gb/windows/desktop/api/winbase/nf-winbase-logonusera>`_."
msgstr ""

#: ../../rst/user_guide/become.rst:634
msgid ""
"The ``logon_flags`` key specifies how Windows will log the user on when "
"creating the new process. The value can be set to none or multiple of the"
" following:"
msgstr ""

#: ../../rst/user_guide/become.rst:637
msgid ""
"``with_profile``: The default logon flag set. The process will load the "
"user's profile in the ``HKEY_USERS`` registry key to "
"``HKEY_CURRENT_USER``."
msgstr ""

#: ../../rst/user_guide/become.rst:640
msgid ""
"``netcredentials_only``: The process will use the same token as the "
"caller but will use the ``become_user`` and ``become_password`` when "
"accessing a remote resource. This is useful in inter-domain scenarios "
"where there is no trust relationship, and should be used with the "
"``new_credentials`` ``logon_type``."
msgstr ""

#: ../../rst/user_guide/become.rst:645
msgid ""
"By default ``logon_flags=with_profile`` is set, if the profile should not"
" be loaded set ``logon_flags=`` or if the profile should be loaded with "
"``netcredentials_only``, set "
"``logon_flags=with_profile,netcredentials_only``."
msgstr ""

#: ../../rst/user_guide/become.rst:649
msgid ""
"For more information, see `dwLogonFlags <https://docs.microsoft.com/en-"
"gb/windows/desktop/api/winbase/nf-winbase-createprocesswithtokenw>`_."
msgstr ""

#: ../../rst/user_guide/become.rst:651
msgid "Here are some examples of how to use ``become_flags`` with Windows tasks:"
msgstr ""

#: ../../rst/user_guide/become.rst:681
msgid "Be aware of the following limitations with ``become`` on Windows:"
msgstr ""

#: ../../rst/user_guide/become.rst:683
msgid ""
"Running a task with ``async`` and ``become`` on Windows Server 2008, 2008"
" R2 and Windows 7 only works when using Ansible 2.7 or newer."
msgstr ""

#: ../../rst/user_guide/become.rst:686
msgid ""
"By default, the become user logs on with an interactive session, so it "
"must have the right to do so on the Windows host. If it does not inherit "
"the ``SeAllowLogOnLocally`` privilege or inherits the "
"``SeDenyLogOnLocally`` privilege, the become process will fail. Either "
"add the privilege or set the ``logon_type`` flag to change the logon type"
" used."
msgstr ""

#: ../../rst/user_guide/become.rst:692
msgid ""
"Prior to Ansible version 2.3, become only worked when "
"``ansible_winrm_transport`` was either ``basic`` or ``credssp``. This "
"restriction has been lifted since the 2.4 release of Ansible for all "
"hosts except Windows Server 2008 (non R2 version)."
msgstr ""

#: ../../rst/user_guide/become.rst:699
msgid "`Mailing List <https://groups.google.com/forum/#!forum/ansible-project>`_"
msgstr ""

#: ../../rst/user_guide/become.rst:700
msgid "Questions? Help? Ideas?  Stop by the list on Google Groups"
msgstr ""

#: ../../rst/user_guide/become.rst:701
msgid "`webchat.freenode.net <https://webchat.freenode.net>`_"
msgstr ""

#: ../../rst/user_guide/become.rst:702
msgid "#ansible IRC chat channel"
msgstr ""

