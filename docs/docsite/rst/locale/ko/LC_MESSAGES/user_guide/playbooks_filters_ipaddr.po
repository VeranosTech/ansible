# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:4
msgid "ipaddr filter"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:8
msgid ""
"``ipaddr()`` is a Jinja2 filter designed to provide an interface to the "
"`netaddr`_ Python package from within Ansible. It can operate on strings "
"or lists of items, test various data to check if they are valid IP "
"addresses, and manipulate the input data to extract requested "
"information. ``ipaddr()`` works with both IPv4 and IPv6 addresses in "
"various forms. There are also additional functions available to "
"manipulate IP subnets and MAC addresses."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:15
msgid ""
"To use this filter in Ansible, you need to install the `netaddr`_ Python "
"library on a computer on which you use Ansible (it is not required on "
"remote hosts). It can usually be installed with either your system "
"package manager or using ``pip``::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:27
msgid "Topics"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:30
msgid "Basic tests"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:32
msgid ""
"``ipaddr()`` is designed to return the input value if a query is True, "
"and ``False`` if a query is False. This way it can be easily used in "
"chained filters. To use the filter, pass a string to it:"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:40
msgid "You can also pass the values as variables::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:44
msgid "Here are some example test results of various input strings::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:62
msgid ""
"Sometimes you need either IPv4 or IPv6 addresses. To filter only for a "
"particular type, ``ipaddr()`` filter has two \"aliases\", ``ipv4()`` and "
"``ipv6()``."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:65
msgid "Example use of an IPv4 filter::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:69
msgid "A similar example of an IPv6 filter::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:73
msgid "Here's some example test results to look for IPv4 addresses::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:81
msgid "And the same data filtered for IPv6 addresses::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:91
msgid "Filtering lists"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:93
msgid ""
"You can filter entire lists - ``ipaddr()`` will return a list with values"
" valid for a particular query::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:110
msgid "Wrapping IPv6 addresses in [ ] brackets"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:112
msgid ""
"Some configuration files require IPv6 addresses to be \"wrapped\" in "
"square brackets (``[ ]``). To accomplish that, you can use the "
"``ipwrap()`` filter. It will wrap all IPv6 addresses and leave any other "
"strings intact::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:119
msgid ""
"As you can see, ``ipwrap()`` did not filter out non-IP address values, "
"which is usually what you want when for example you are mixing IP "
"addresses with hostnames. If you still want to filter out all non-IP "
"address values, you can chain both filters together::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:129
msgid "Basic queries"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:131
msgid ""
"You can provide a single argument to each ``ipaddr()`` filter. The filter"
" will then treat it as a query and return values modified by that query. "
"Lists will contain only values that you are querying for."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:135
msgid "Types of queries include:"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:137
msgid "query by name: ``ipaddr('address')``, ``ipv4('network')``;"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:138
msgid ""
"query by CIDR range: ``ipaddr('192.168.0.0/24')``, "
"``ipv6('2001:db8::/32')``;"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:139
msgid "query by index number: ``ipaddr('1')``, ``ipaddr('-1')``;"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:141
msgid "If a query type is not recognized, Ansible will raise an error."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:145
msgid "Getting information about hosts and networks"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:147
#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:346
msgid "Here's our test list again::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:152
msgid ""
"Let's take the list above and get only those elements that are host IP "
"addresses and not network ranges::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:158
msgid ""
"As you can see, even though some values had a host address with a CIDR "
"prefix, they were dropped by the filter. If you want host IP addresses "
"with their correct CIDR prefixes (as is common with IPv6 addressing), you"
" can use the ``ipaddr('host')`` filter::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:166
msgid "Filtering by IP address type also works::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:174
msgid ""
"You can check if IP addresses or network ranges are accessible on a "
"public Internet, or if they are in private networks::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:183
msgid "You can check which values are specifically network ranges::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:188
msgid "You can also check how many IP addresses can be in a certain range::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:193
msgid ""
"By specifying a network range as a query, you can check if a given value "
"is in that range::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:199
msgid ""
"If you specify a positive or negative integer as a query, ``ipaddr()`` "
"will treat this as an index and will return the specific IP address from "
"a network range, in the 'host/prefix' format::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:215
msgid ""
"You can also select IP addresses from a range by their index, from the "
"start or end of the range::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:231
msgid "Getting information from host/prefix values"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:233
msgid ""
"You frequently use a combination of IP addresses and subnet prefixes "
"(\"CIDR\"), this is even more common with IPv6. The ``ipaddr()`` filter "
"can extract useful data from these prefixes."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:237
msgid ""
"Here's an example set of two host prefixes (with some \"control\" "
"values)::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:241
msgid ""
"First, let's make sure that we only work with correct host/prefix values,"
" not just subnets or single IP addresses::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:247
msgid ""
"In Debian-based systems, the network configuration stored in the "
"``/etc/network/interfaces`` file uses a combination of IP address, "
"network address, netmask and broadcast address to configure an IPv4 "
"network interface. We can get these values from a single 'host/prefix' "
"combination:"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:266
msgid ""
"In the above example, we needed to handle the fact that values were "
"stored in a list, which is unusual in IPv4 networks, where only a single "
"IP address can be set on an interface. However, IPv6 networks can have "
"multiple IP addresses set on an interface::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:288
msgid ""
"If needed, you can extract subnet and prefix information from the "
"'host/prefix' value::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:297
msgid "Converting subnet masks to CIDR notation"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:299
msgid ""
"Given a subnet in the form of network address and subnet mask, the "
"``ipaddr()`` filter can convert it into CIDR notation.  This can be "
"useful for converting Ansible facts gathered about network configuration "
"from subnet masks into CIDR format::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:314
msgid "First concatenate the network and netmask::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:319
msgid ""
"This result can be converted to canonical form with ``ipaddr()`` to "
"produce a subnet in CIDR format::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:328
msgid "Getting information about the network in CIDR notation"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:330
msgid ""
"Given an IP address, the ``ipaddr()`` filter can produce the network "
"address in CIDR notation. This can be useful when you want to obtain the "
"network address from the IP address in CIDR format."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:333
msgid "Here's an example of IP address::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:338
msgid "This can be used to obtain the network address in CIDR notation format::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:344
msgid "IP address conversion"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:351
msgid "You can convert IPv4 addresses into IPv6 addresses::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:356
msgid "Converting from IPv6 to IPv4 works very rarely::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:361
msgid "But we can make a double conversion if needed::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:366
msgid ""
"You can convert IP addresses to integers, the same way that you can "
"convert integers into IP addresses::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:372
msgid "You can convert IP addresses to PTR records::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:385
msgid "Converting IPv4 address to a 6to4 address"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:387
msgid ""
"A `6to4`_ tunnel is a way to access the IPv6 Internet from an IPv4-only "
"network. If you have a public IPv4 address, you can automatically "
"configure its IPv6 equivalent in the ``2002::/16`` network range. After "
"conversion you will gain access to a ``2002:xxxx:xxxx::/48`` subnet which"
" could be split into 65535 ``/64`` subnets if needed."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:393
msgid ""
"To convert your IPv4 address, just send it through the ``'6to4'`` filter."
" It will be automatically converted to a router address (with a "
"``::1/48`` host address)::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:402
msgid "IP Math"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:406
msgid "The ``ipmath()`` filter can be used to do simple IP math/arithmetic."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:408
msgid "Here are a few simple examples::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:425
msgid "Subnet manipulation"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:427
msgid ""
"The ``ipsubnet()`` filter can be used to manipulate network subnets in "
"several ways."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:429
msgid "Here is an example IP address and subnet::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:434
msgid ""
"To check if a given string is a subnet, pass it through the filter "
"without any arguments. If the given string is an IP address, it will be "
"converted into a subnet::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:444
msgid ""
"If you specify a subnet size as the first parameter of the  "
"``ipsubnet()`` filter, and the subnet size is **smaller than the current "
"one**, you will get the number of subnets a given subnet can be split "
"into::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:451
msgid ""
"The second argument of the ``ipsubnet()`` filter is an index number; by "
"specifying it you can get a new subnet with the specified size::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:470
msgid ""
"If you specify an IP address instead of a subnet, and give a subnet size "
"as the first argument, the ``ipsubnet()`` filter will instead return the "
"biggest subnet that contains that given IP address::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:477
msgid ""
"By specifying an index number as a second argument, you can select "
"smaller and smaller subnets::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:496
msgid ""
"By specifying another subnet as a second argument, if the second subnet "
"includes the first, you can determine the rank of the first subnet in the"
" second ::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:515
msgid ""
"If the second subnet doesn't include the first subnet, the ``ipsubnet()``"
" filter raises an error."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:518
msgid ""
"You can use the ``ipsubnet()`` filter with the ``ipaddr()`` filter to, "
"for example, split a given ``/48`` prefix into smaller ``/64`` subnets::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:524
msgid ""
"Because of the size of IPv6 subnets, iteration over all of them to find "
"the correct one may take some time on slower computers, depending on the "
"size difference between the subnets."
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:529
msgid "Subnet Merging"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:533
msgid ""
"The ``cidr_merge()`` filter can be used to merge subnets or individual "
"addresses into their minimal representation, collapsing overlapping "
"subnets and merging adjacent ones wherever possible::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:543
msgid ""
"Changing the action from 'merge' to 'span' will instead return the "
"smallest subnet which contains all of the inputs::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:553
msgid "MAC address filter"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:555
msgid ""
"You can use the ``hwaddr()`` filter to check if a given string is a MAC "
"address or convert it between various formats. Examples::"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:575
msgid ":doc:`playbooks`"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:576
msgid "An introduction to playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:577
msgid ":doc:`playbooks_filters`"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:578
msgid "Introduction to Jinja2 filters and their uses"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:579
msgid ":doc:`playbooks_conditionals`"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:580
msgid "Conditional statements in playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:581
msgid ":doc:`playbooks_variables`"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:582
msgid "All about variables"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:583
msgid ":doc:`playbooks_loops`"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:584
msgid "Looping in playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:585
msgid ":doc:`playbooks_reuse_roles`"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:586
msgid "Playbook organization by roles"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:587
msgid ":doc:`playbooks_best_practices`"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:588
msgid "Best practices in playbooks"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:589
msgid "`User Mailing List <https://groups.google.com/group/ansible-devel>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:590
msgid "Have a question?  Stop by the google group!"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:591
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/user_guide/playbooks_filters_ipaddr.rst:592
msgid "#ansible IRC chat channel"
msgstr ""

