# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/user_guide/windows_usage.rst:2
msgid "Using Ansible and Windows"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:3
msgid ""
"When using Ansible to manage Windows, many of the syntax and rules that "
"apply for Unix/Linux hosts also apply to Windows, but there are still "
"some differences when it comes to components like path separators and OS-"
"specific tasks. This document covers details specific to using Ansible "
"for Windows."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:9
msgid "Topics"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:12
msgid "Use Cases"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:13
msgid ""
"Ansible can be used to orchestrate a multitude of tasks on Windows "
"servers. Below are some examples and info about common tasks."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:17
msgid "Installing Software"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:18
msgid "There are three main ways that Ansible can be used to install software:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:20
msgid ""
"Using the ``win_chocolatey`` module. This sources the program data from "
"the default public `Chocolatey <https://chocolatey.org/>`_ repository. "
"Internal repositories can be used instead by setting the ``source`` "
"option."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:24
msgid ""
"Using the ``win_package`` module. This installs software using an MSI or "
".exe installer from a local/network path or URL."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:27
msgid ""
"Using the ``win_command`` or ``win_shell`` module to run an installer "
"manually."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:29
msgid ""
"The ``win_chocolatey`` module is recommended since it has the most "
"complete logic for checking to see if a package has already been "
"installed and is up-to-date."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:31
msgid "Below are some examples of using all three options to install 7-Zip:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:81
msgid ""
"Some installers like Microsoft Office or SQL Server require credential "
"delegation or access to components restricted by WinRM. The best method "
"to bypass these issues is to use ``become`` with the task. With "
"``become``, Ansible will run the installer as if it were run "
"interactively on the host."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:86
msgid ""
"Many installers do not properly pass back error information over WinRM. "
"In these cases, if the install has been  verified to work locally the "
"recommended method is to use become."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:88
msgid ""
"Some installers restart the WinRM or HTTP services, or cause them to "
"become temporarily unavailable, making Ansible assume the system is "
"unreachable."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:91
msgid "Installing Updates"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:92
msgid ""
"The ``win_updates`` and ``win_hotfix`` modules can be used to install "
"updates or hotfixes on a host. The module ``win_updates`` is used to "
"install multiple updates by category, while ``win_hotfix`` can be used to"
" install a single update or hotfix file that has been downloaded locally."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:97
msgid ""
"The ``win_hotfix`` module has a requirement that the DISM PowerShell "
"cmdlets are present. These cmdlets were only added by default on Windows "
"Server 2012 and newer and must be installed on older Windows hosts."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:101
msgid "The following example shows how ``win_updates`` can be used:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:117
msgid ""
"The following example show how ``win_hotfix`` can be used to install a "
"single update or hotfix:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:139
msgid "Set Up Users and Groups"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:140
msgid ""
"Ansible can be used to create Windows users and groups both locally and "
"on a domain."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:143
msgid "Local"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:144
msgid ""
"The modules ``win_user``, ``win_group`` and ``win_group_membership`` "
"manage Windows users, groups and group memberships locally."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:147
msgid ""
"The following is an example of creating local accounts and groups that "
"can access a folder on the same host:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:190
msgid "Domain"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:191
msgid ""
"The modules ``win_domain_user`` and ``win_domain_group`` manages users "
"and groups in a domain. The below is an example of ensuring a batch of "
"domain users are created:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:217
msgid "Running Commands"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:218
msgid ""
"In cases where there is no appropriate module available for a task, a "
"command or script can be run using the ``win_shell``, ``win_command``, "
"``raw``, and ``script`` modules."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:221
msgid ""
"The ``raw`` module simply executes a Powershell command remotely. Since "
"``raw`` has none of the wrappers that Ansible typically uses, ``become``,"
" ``async`` and environment variables do not work."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:225
msgid ""
"The ``script`` module executes a script from the Ansible controller on "
"one or more Windows hosts. Like ``raw``, ``script`` currently does not "
"support ``become``, ``async``, or environment variables."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:229
msgid ""
"The ``win_command`` module is used to execute a command which is either "
"an executable or batch file, while the ``win_shell`` module is used to "
"execute commands within a shell."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:233
msgid "Choosing Command or Shell"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:234
msgid ""
"The ``win_shell`` and ``win_command`` modules can both be used to execute"
" a command or commands. The ``win_shell`` module is run within a shell-"
"like process like ``PowerShell`` or ``cmd``, so it has access to shell "
"operators like ``<``, ``>``, ``|``, ``;``, ``&&``, and ``||``. Multi-"
"lined commands can also be run in ``win_shell``."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:238
msgid ""
"The ``win_command`` module simply runs a process outside of a shell. It "
"can still run a shell command like ``mkdir`` or ``New-Item`` by passing "
"the shell commands to a shell executable like ``cmd.exe`` or "
"``PowerShell.exe``."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:242
msgid "Here are some examples of using ``win_command`` and ``win_shell``:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:270
msgid ""
"Some commands like ``mkdir``, ``del``, and ``copy`` only exist in the CMD"
" shell. To run them with ``win_command`` they must be prefixed with "
"``cmd.exe /c``."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:275
msgid "Argument Rules"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:276
msgid ""
"When running a command through ``win_command``, the standard Windows "
"argument rules apply:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:279
msgid ""
"Each argument is delimited by a white space, which can either be a space "
"or a tab."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:282
msgid ""
"An argument can be surrounded by double quotes ``\"``. Anything inside "
"these quotes is interpreted as a single argument even if it contains "
"whitespace."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:285
msgid ""
"A double quote preceded by a backslash ``\\`` is interpreted as just a "
"double quote ``\"`` and not as an argument delimiter."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:288
msgid ""
"Backslashes are interpreted literally unless it immediately precedes "
"double quotes; for example ``\\`` == ``\\`` and ``\\\"`` == ``\"``"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:291
msgid ""
"If an even number of backslashes is followed by a double quote, one "
"backslash is used in the argument for every pair, and the double quote is"
" used as a string delimiter for the argument."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:295
msgid ""
"If an odd number of backslashes is followed by a double quote, one "
"backslash is used in the argument for every pair, and the double quote is"
" escaped and made a literal double quote in the argument."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:299
msgid "With those rules in mind, here are some examples of quoting:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:324
msgid ""
"For more information, see `escaping arguments <https://msdn.microsoft.com"
"/en-us/library/17w5ykft(v=vs.85).aspx>`_."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:327
msgid "Creating and Running a Scheduled Task"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:328
msgid ""
"WinRM has some restrictions in place that cause errors when running "
"certain commands. One way to bypass these restrictions is to run a "
"command through a scheduled task. A scheduled task is a Windows component"
" that provides the ability to run an executable on a schedule and under a"
" different account."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:333
msgid ""
"Ansible version 2.5 added modules that make it easier to work with "
"scheduled tasks in Windows. The following is an example of running a "
"script as a scheduled task that deletes itself after running:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:362
msgid ""
"The modules used in the above example were updated/added in Ansible "
"version 2.5."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:366
msgid "Path Formatting for Windows"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:367
msgid ""
"Windows differs from a traditional POSIX operating system in many ways. "
"One of the major changes is the shift from ``/`` as the path separator to"
" ``\\``. This can cause major issues with how playbooks are written, "
"since ``\\`` is often used as an escape character on POSIX systems."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:372
msgid ""
"Ansible allows two different styles of syntax; each deals with path "
"separators for Windows differently:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:375
msgid "YAML Style"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:376
msgid ""
"When using the YAML syntax for tasks, the rules are well-defined by the "
"YAML standard:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:379
msgid ""
"When using a normal string (without quotes), YAML will not consider the "
"backslash an escape character."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:382
msgid ""
"When using single quotes ``'``, YAML will not consider the backslash an "
"escape character."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:385
msgid ""
"When using double quotes ``\"``, the backslash is considered an escape "
"character and needs to escaped with another backslash."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:388
msgid ""
"You should only quote strings when it is absolutely necessary or required"
" by YAML, and then use single quotes."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:391
msgid ""
"The YAML specification considers the following `escape sequences "
"<http://yaml.org/spec/current.html#id2517668>`_:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:393
msgid ""
"``\\0``, ``\\\\``, ``\\\"``, ``\\_``, ``\\a``, ``\\b``, ``\\e``, ``\\f``,"
" ``\\n``, ``\\r``, ``\\t``, ``\\v``, ``\\L``, ``\\N`` and ``\\P`` -- "
"Single character escape"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:396
msgid ""
"``<TAB>``, ``<SPACE>``, ``<NBSP>``, ``<LNSP>``, ``<PSP>`` -- Special "
"characters"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:399
#: ../../rst/user_guide/windows_usage.rst:449
msgid "``\\x..`` -- 2-digit hex escape"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:401
#: ../../rst/user_guide/windows_usage.rst:451
msgid "``\\u....`` -- 4-digit hex escape"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:403
#: ../../rst/user_guide/windows_usage.rst:453
msgid "``\\U........`` -- 8-digit hex escape"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:405
msgid "Here are some examples on how to write Windows paths::"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:419
msgid "This is an example which will fail:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:426
msgid "This example shows the use of single quotes when they are required::"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:435
msgid "Legacy key=value Style"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:436
msgid ""
"The legacy ``key=value`` syntax is used on the command line for ad-hoc "
"commands, or inside playbooks. The use of this style is discouraged "
"within playbooks because backslash characters need to be escaped, making "
"playbooks harder to read. The legacy syntax depends on the specific "
"implementation in Ansible, and quoting (both single and double) does not "
"have any effect on how it is parsed by Ansible."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:443
msgid ""
"The Ansible key=value parser parse_kv() considers the following escape "
"sequences:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:446
msgid ""
"``\\``, ``'``, ``\"``, ``\\a``, ``\\b``, ``\\f``, ``\\n``, ``\\r``, "
"``\\t`` and ``\\v`` -- Single character escape"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:455
msgid "``\\N{...}`` -- Unicode character by name"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:457
msgid ""
"This means that the backslash is an escape character for some sequences, "
"and it is usually safer to escape a backslash when in this form."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:460
msgid "Here are some examples of using Windows paths with the key=value style:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:482
msgid ""
"The failing examples don't fail outright but will substitute ``\\t`` with"
" the ``<TAB>`` character resulting in ``tempdir`` being "
"``C:\\Windows<TAB>emp``."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:486
msgid "Limitations"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:487
msgid "Some things you cannot do with Ansible and Windows are:"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:489
msgid "Upgrade PowerShell"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:491
msgid "Interact with the WinRM listeners"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:493
msgid ""
"Because WinRM is reliant on the services being online and running during "
"normal operations, you cannot upgrade PowerShell or interact with WinRM "
"listeners with Ansible. Both of these actions will cause the connection "
"to fail. This can technically be avoided by using ``async`` or a "
"scheduled task, but those methods are fragile if the process it runs "
"breaks the underlying connection Ansible uses, and are best left to the "
"bootstrapping process or before an image is created."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:497
msgid "Developing Windows Modules"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:498
msgid ""
"Because Ansible modules for Windows are written in PowerShell, the "
"development guides for Windows modules differ substantially from those "
"for standard standard modules. Please see "
":ref:`developing_modules_general_windows` for more information."
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:504
msgid ":ref:`playbooks_intro`"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:505
msgid "An introduction to playbooks"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:506
msgid ":ref:`playbooks_best_practices`"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:507
msgid "Best practices advice"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:508
msgid ":ref:`List of Windows Modules <windows_modules>`"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:509
msgid "Windows specific module list, all implemented in PowerShell"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:510
msgid "`User Mailing List <https://groups.google.com/group/ansible-project>`_"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:511
msgid "Have a question?  Stop by the google group!"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:512
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/user_guide/windows_usage.rst:513
msgid "#ansible IRC chat channel"
msgstr ""

#~ msgid "Here are some examples on how to write Windows paths:"
#~ msgstr ""

#~ msgid ":doc:`index`"
#~ msgstr ""

#~ msgid "The documentation index"
#~ msgstr ""

#~ msgid ":doc:`playbooks`"
#~ msgstr ""

#~ msgid ":doc:`playbooks_best_practices`"
#~ msgstr ""

