# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/reference_appendices/test_strategies.rst:4
msgid "Testing Strategies"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:9
msgid "Integrating Testing With Ansible Playbooks"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:11
msgid ""
"Many times, people ask, \"how can I best integrate testing with Ansible "
"playbooks?\"  There are many options.  Ansible is actually designed to be"
" a \"fail-fast\" and ordered system, therefore it makes it easy to embed "
"testing directly in Ansible playbooks.  In this chapter, we'll go into "
"some patterns for integrating tests of infrastructure and discuss the "
"right level of testing that may be appropriate."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:15
msgid ""
"This is a chapter about testing the application you are deploying, not "
"the chapter on how to test Ansible modules during development.  For that "
"content, please hop over to the Development section."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:17
msgid ""
"By incorporating a degree of testing into your deployment workflow, there"
" will be fewer surprises when code hits production and, in many cases, "
"tests can be leveraged in production to prevent failed updates from "
"migrating across an entire installation.  Since it's push-based, it's "
"also very easy to run the steps on the localhost or testing servers. "
"Ansible lets you insert as many checks and balances into your upgrade "
"workflow as you would like to have."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:22
msgid "The Right Level of Testing"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:24
msgid ""
"Ansible resources are models of desired-state.  As such, it should not be"
" necessary to test that services are started, packages are installed, or "
"other such things.  Ansible is the system that will ensure these things "
"are declaratively true.   Instead, assert these things in your playbooks."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:36
msgid ""
"If you think the service may not be started, the best thing to do is "
"request it to be started.  If the service fails to start, Ansible will "
"yell appropriately. (This should not be confused with whether the service"
" is doing something functional, which we'll show more about how to do "
"later)."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:43
msgid "Check Mode As A Drift Test"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:45
msgid ""
"In the above setup, `--check` mode in Ansible can be used as a layer of "
"testing as well.  If running a deployment playbook against an existing "
"system, using the `--check` flag to the `ansible` command will report if "
"Ansible thinks it would have had to have made any changes to bring the "
"system into a desired state."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:49
msgid ""
"This can let you know up front if there is any need to deploy onto the "
"given system.  Ordinarily scripts and commands don't run in check mode, "
"so if you want certain steps to always execute in check mode, such as "
"calls to the script module, disable check mode for those tasks::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:61
msgid "Modules That Are Useful for Testing"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:63
msgid ""
"Certain playbook modules are particularly good for testing.  Below is an "
"example that ensures a port is open::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:72
msgid ""
"Here's an example of using the URI module to make sure a web service "
"returns::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:83
msgid ""
"It's easy to push an arbitrary script (in any language) on a remote host "
"and the script will automatically fail if it has a non-zero return code::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:90
msgid ""
"If using roles (you should be, roles are great!), scripts pushed by the "
"script module can live in the 'files/' directory of a role."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:92
msgid ""
"And the assert module makes it very easy to validate various kinds of "
"truth::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:104
msgid ""
"Should you feel the need to test for existence of files that are not "
"declaratively set by your Ansible configuration, the 'stat' module is a "
"great choice::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:117
msgid ""
"As mentioned above, there's no need to check things like the return codes"
" of commands.  Ansible is checking them automatically. Rather than "
"checking for a user to exist, consider using the user module to make it "
"exist."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:120
msgid ""
"Ansible is a fail-fast system, so when there is an error creating that "
"user, it will stop the playbook run.  You do not have to check up behind "
"it."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:124
msgid "Testing Lifecycle"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:126
msgid ""
"If writing some degree of basic validation of your application into your "
"playbooks, they will run every time you deploy."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:128
msgid ""
"As such, deploying into a local development VM and a staging environment "
"will both validate that things are according to plan ahead of your "
"production deploy."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:131
msgid "Your workflow may be something like this::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:138
msgid ""
"Something like an integration test battery should be written by your QA "
"team if you are a production webservice.  This would include things like "
"Selenium tests or automated API tests and would usually not be something "
"embedded into your Ansible playbooks."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:141
msgid ""
"However, it does make sense to include some basic health checks into your"
" playbooks, and in some cases it may be possible to run a subset of the "
"QA battery against remote nodes.   This is what the next section covers."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:145
msgid "Integrating Testing With Rolling Updates"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:147
msgid ""
"If you have read into :ref:`playbooks_delegation` it may quickly become "
"apparent that the rolling update pattern can be extended, and you can use"
" the success or failure of the playbook run to decide whether to add a "
"machine into a load balancer or not."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:150
msgid "This is the great culmination of embedded tests::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:175
msgid ""
"Of course in the above, the \"take out of the pool\" and \"add back\" "
"steps would be replaced with a call to a Ansible load balancer module or "
"appropriate shell command.  You might also have steps that use a "
"monitoring module to start and end an outage window for the machine."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:179
msgid ""
"However, what you can see from the above is that tests are used as a gate"
" -- if the \"apply_testing_checks\" step is not performed, the machine "
"will not go back into the pool."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:182
msgid ""
"Read the delegation chapter about \"max_fail_percentage\" and you can "
"also control how many failing tests will stop a rolling update from "
"proceeding."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:185
msgid ""
"This above approach can also be modified to run a step from a testing "
"machine remotely against a machine::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:213
msgid ""
"In the above example, a script is run from the testing server against a "
"remote node prior to bringing it back into the pool."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:216
msgid ""
"In the event of a problem, fix the few servers that fail using Ansible's "
"automatically generated retry file to repeat the deploy on just those "
"servers."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:220
msgid "Achieving Continuous Deployment"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:222
msgid ""
"If desired, the above techniques may be extended to enable continuous "
"deployment practices."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:224
msgid "The workflow may look like this::"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:231
msgid ""
"Some Ansible users use the above approach to deploy a half-dozen or dozen"
" times an hour without taking all of their infrastructure offline.  A "
"culture of automated QA is vital if you wish to get to this level."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:234
msgid ""
"If you are still doing a large amount of manual QA, you should still make"
" the decision on whether to deploy manually as well, but it can still "
"help to work in the rolling update patterns of the previous section and "
"incorporate some basic health checks using modules like 'script', 'stat',"
" 'uri', and 'assert'."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:239
msgid "Conclusion"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:241
msgid ""
"Ansible believes you should not need another framework to validate basic "
"things of your infrastructure is true.  This is the case because Ansible "
"is an order-based system that will fail immediately on unhandled errors "
"for a host, and prevent further configuration of that host.  This forces "
"errors to the top and shows them in a summary at the end of the Ansible "
"run."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:245
msgid ""
"However, as Ansible is designed as a multi-tier orchestration system, it "
"makes it very easy to incorporate tests into the end of a playbook run, "
"either using loose tasks or roles.  When used with rolling updates, "
"testing steps can decide whether to put a machine back into a load "
"balanced pool or not."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:249
msgid ""
"Finally, because Ansible errors propagate all the way up to the return "
"code of the Ansible program itself, and Ansible by default runs in an "
"easy push-based mode, Ansible is a great step to put into a build "
"environment if you wish to use it to roll out systems as part of a "
"Continuous Integration/Continuous Delivery pipeline, as is covered in "
"sections above."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:253
msgid ""
"The focus should not be on infrastructure testing, but on application "
"testing, so we strongly encourage getting together with your QA team and "
"ask what sort of tests would make sense to run every time you deploy "
"development VMs, and which sort of tests they would like to run against "
"the staging environment on every deploy.  Obviously at the development "
"stage, unit tests are great too.  But don't unit test your playbook.  "
"Ansible describes states of resources declaratively, so you don't have "
"to.  If there are cases where you want to be sure of something though, "
"that's great, and things like stat/assert are great go-to modules for "
"that purpose."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:259
msgid ""
"In all, testing is a very organizational and site-specific thing.  "
"Everybody should be doing it, but what makes the most sense for your "
"environment will vary with what you are deploying and who is using it -- "
"but everyone benefits from a more robust and reliable deployment system."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:265
msgid ":ref:`all_modules`"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:266
msgid "All the documentation for Ansible modules"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:267
msgid ":ref:`working_with_playbooks`"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:268
msgid "An introduction to playbooks"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:269
msgid ":ref:`playbooks_delegation`"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:270
msgid ""
"Delegation, useful for working with load balancers, clouds, and locally "
"executed steps."
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:271
msgid "`User Mailing List <https://groups.google.com/group/ansible-project>`_"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:272
msgid "Have a question?  Stop by the google group!"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:273
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/reference_appendices/test_strategies.rst:274
msgid "#ansible IRC chat channel"
msgstr ""

