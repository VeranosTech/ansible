# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:5
msgid "Ansible Network Examples"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:7
msgid ""
"This document describes some examples of using Ansible to manage your "
"network infrastructure."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:13
msgid "Prerequisites"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:15
msgid "This example requires the following:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:17
msgid ""
"**Ansible 2.5** (or higher) installed. See "
":ref:`intro_installation_guide` for more information."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:18
msgid "One or more network devices that are compatible with Ansible."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:19
msgid "Basic understanding of YAML :ref:`yaml_syntax`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:20
msgid ""
"Basic understanding of Jinja2 templates. See :ref:`playbooks_templating` "
"for more information."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:21
msgid "Basic Linux command line use."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:22
msgid "Basic knowledge of network switch & router configurations."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:26
msgid "Groups and variables in an inventory file"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:28
msgid ""
"An ``inventory`` file is a YAML or INI-like configuration file that "
"defines the mapping of hosts into groups."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:30
msgid ""
"In our example, the inventory file defines the groups ``eos``, ``ios``, "
"``vyos`` and a \"group of groups\" called ``switches``. Further details "
"about subgroups and inventory files can be found in the :ref:`Ansible "
"inventory Group documentation <subgroups>`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:32
msgid ""
"Because Ansible is a flexible tool, there are a number of ways to specify"
" connection information and credentials. We recommend using the "
"``[my_group:vars]`` capability in your inventory file. Here's what it "
"would look like if you specified your SSH passwords (encrypted with "
"Ansible Vault) among your variables:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:99
msgid ""
"If you use ssh-agent, you do not need the ``ansible_password`` lines. If "
"you use ssh keys, but not ssh-agent, and you have multiple keys, specify "
"the key to use for each connection in the ``[group:vars]`` section with "
"``ansible_ssh_private_key_file=/path/to/correct/key``. For more "
"information on ``ansible_ssh_`` options see :ref:`behavioral_parameters`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:103
msgid "Never store passwords in plain text."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:106
msgid "Ansible vault for password encryption"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:108
msgid ""
"The \"Vault\" feature of Ansible allows you to keep sensitive data such "
"as passwords or keys in encrypted files, rather than as plain text in "
"your playbooks or roles. These vault files can then be distributed or "
"placed in source control. See :ref:`playbooks_vault` for more "
"information."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:111
msgid "Common inventory variables"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:113
msgid ""
"The following variables are common for all platforms in the inventory, "
"though they can be overwritten for a particular inventory group or host."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_connection"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:117
msgid ""
"Ansible uses the ansible-connection setting to determine how to connect "
"to a remote device. When working with Ansible Networking, set this to "
"``network_cli`` so Ansible treats the remote node as a network device "
"with a limited execution environment. Without this setting, Ansible would"
" attempt to use ssh to connect to the remote and execute the Python "
"script on the network device, which would fail because Python generally "
"isn't available on network devices."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_network_os"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:119
msgid ""
"Informs Ansible which Network platform this hosts corresponds to. This is"
" required when using ``network_cli`` or ``netconf``."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_user"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:120
msgid ""
"The user to connect to the remote device (switch) as. Without this the "
"user that is running ``ansible-playbook`` would be used. Specifies which "
"user on the network device the connection"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_password"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:123
msgid ""
"The corresponding password for ``ansible_user`` to log in as. If not "
"specified SSH key will be used."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_become"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:125
msgid "If enable mode (privilege mode) should be used, see the next section."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_become_method"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:127
msgid ""
"Which type of `become` should be used, for ``network_cli`` the only valid"
" choice is ``enable``."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:130
msgid "Privilege escalation"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:132
msgid ""
"Certain network platforms, such as Arista EOS and Cisco IOS, have the "
"concept of different privilege modes. Certain network modules, such as "
"those that modify system state including users, will only work in high "
"privilege states. Ansible supports ``become`` when using ``connection: "
"network_cli``. This allows privileges to be raised for the specific tasks"
" that need them. Adding ``become: yes`` and ``become_method: enable`` "
"informs Ansible to go into privilege mode before executing the task, as "
"shown here:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:142
msgid ""
"For more information, see the :ref:`using become with network "
"modules<become_network>` guide."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:146
msgid "Jump hosts"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:148
msgid ""
"If the Ansible Controller doesn't have a direct route to the remote "
"device and you need to use a Jump Host, please see the :ref:`Ansible "
"Network Proxy Command <network_delegate_to_vs_ProxyCommand>` guide for "
"details on how to achieve this."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:151
msgid "Example 1: collecting facts and creating backup files with a playbook"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:153
msgid ""
"Ansible facts modules gather system information 'facts' that are "
"available to the rest of your playbook."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:155
msgid ""
"Ansible Networking ships with a number of network-specific facts modules."
" In this example, we use the ``_facts`` modules :ref:`eos_facts "
"<eos_facts_module>`, :ref:`ios_facts <ios_facts_module>` and "
":ref:`vyos_facts <vyos_facts_module>` to connect to the remote networking"
" device. As the credentials are not explicitly passed via module "
"arguments, Ansible uses the username and password from the inventory "
"file."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:157
msgid ""
"Ansible's \"Network Fact modules\" gather information from the system and"
" store the results in facts prefixed with ``ansible_net_``. The data "
"collected by these modules is documented in the `Return Values` section "
"of the module docs, in this case :ref:`eos_facts <eos_facts_module>` and "
":ref:`vyos_facts <vyos_facts_module>`. We can use the facts, such as "
"``ansible_net_version`` late on in the \"Display some facts\" task."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:159
msgid ""
"To ensure we call the correct mode (``*_facts``) the task is "
"conditionally run based on the group defined in the inventory file, for "
"more information on the use of conditionals in Ansible Playbooks see "
":ref:`the_when_statement`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:161
msgid ""
"In this example, we will create an inventory file containing some network"
" switches, then run a playbook to connect to the network devices and "
"return some information about them."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:164
msgid "Step 1: Creating the inventory"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:166
msgid "First, create a file called ``inventory``, containing:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:186
msgid "Step 2: Creating the playbook"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:188
msgid ""
"Next, create a playbook file called ``facts-demo.yml`` containing the "
"following:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:288
msgid "Step 3: Running the playbook"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:290
msgid "To run the playbook, run the following from a console prompt:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:296
msgid "This should return output similar to the following:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:306
msgid "Step 4: Examining the playbook results"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:308
msgid ""
"Next, look at the contents of the file we created containing the switch "
"facts:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:314
msgid "You can also look at the backup files:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:321
msgid ""
"If `ansible-playbook` fails, please follow the debug steps in "
":ref:`network_debug_troubleshooting`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:327
msgid "Example 2: simplifying playbooks with network agnostic modules"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:329
msgid ""
"(This example originally appeared in the `Deep Dive on cli_command for "
"Network Automation <https://www.ansible.com/blog/deep-dive-on-cli-"
"command-for-network-automation>`_ blog post by Sean Cavanaugh -`@IPvSean "
"<https://github.com/IPvSean>`_)."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:331
msgid ""
"If you have two or more network platforms in your environment, you can "
"use the network agnostic modules to simplify your playbooks. You can use "
"network agnostic modules such as ``cli_command`` or ``cli_config`` in "
"place of the platform-specific modules such as ``eos_config``, "
"``ios_config``, and ``junos_config``. This reduces the number of tasks "
"and conditionals you need in your playbooks."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:334
msgid ""
"Network agnostic modules require the :ref:`network_cli "
"<network_cli_connection>` connection plugin."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:338
msgid "Sample playbook with platform-specific modules"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:340
msgid ""
"This example assumes three platforms, Arista EOS, Cisco NXOS, and Juniper"
" JunOS.  Without the network agnostic modules, a sample playbook might "
"contain the following three tasks with platform-specific commands:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:361
msgid "Simplified playbook with ``cli_command`` network agnostic module"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:363
msgid ""
"You can replace these platform-specific modules with the network agnostic"
" ``cli_command`` module as follows:"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:410
msgid ""
"If you use groups and group_vars by platform type, this playbook can be "
"further simplified to :"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:426
msgid ""
"You can see a full example of this using group_vars and also a "
"configuration backup example at `Network agnostic examples "
"<https://github.com/network-automation/agnostic_example>`_."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:429
msgid "Using multiple prompts with the  ``cli_command``"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:431
msgid "The ``cli_command`` also supports multiple prompts."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:452
msgid ""
"See the :ref:`cli_command <cli_command_module>` for full documentation on"
" this command."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:456
msgid "Implementation Notes"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:460
msgid "Demo variables"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:462
msgid ""
"Although these tasks are not needed to write data to disk, they are used "
"in this example to demonstrate some methods of accessing facts about the "
"given devices or a named host."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:464
msgid ""
"Ansible ``hostvars`` allows you to access variables from a named host. "
"Without this we would return the details for the current host, rather "
"than the named host."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:466
msgid "For more information, see :ref:`magic_variables_and_hostvars`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:469
msgid "Get running configuration"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:471
msgid ""
"The :ref:`eos_config <eos_config_module>` and :ref:`vyos_config "
"<vyos_config_module>` modules have a ``backup:`` option that when set "
"will cause the module to create a full backup of the current ``running-"
"config`` from the remote device before any changes are made. The backup "
"file is written to the ``backup`` folder in the playbook root directory. "
"If the directory does not exist, it is created."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:473
msgid ""
"To demonstrate how we can move the backup file to a different location, "
"we register the result and move the file to the path stored in "
"``backup_path``."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:475
msgid ""
"Note that when using variables from tasks in this way we use double "
"quotes (``\"``) and double curly-brackets (``{{...}}`` to tell Ansible "
"that this is a variable."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:478
msgid "Troubleshooting"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:480
msgid ""
"If you receive an connection error please double check the inventory and "
"playbook for typos or missing lines. If the issue still occurs follow the"
" debug steps in :ref:`network_debug_troubleshooting`."
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:484
msgid ":ref:`network_guide`"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:485
msgid ":ref:`intro_inventory`"
msgstr ""

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:486
msgid ":ref:`Vault best practices <best_practices_for_variables_and_vaults>`"
msgstr ""

#~ msgid "Network Best Practices for Ansible 2.5"
#~ msgstr ""

#~ msgid "Overview"
#~ msgstr ""

#~ msgid ""
#~ "This document explains the best "
#~ "practices for using Ansible 2.5 to "
#~ "manage your network infrastructure."
#~ msgstr ""

#~ msgid "Audience"
#~ msgstr ""

#~ msgid ""
#~ "This example is intended for network "
#~ "or system administrators who want to "
#~ "understand how to use Ansible to "
#~ "manage network devices."
#~ msgstr ""

#~ msgid ""
#~ "**Ansible 2.5** (or higher) installed. "
#~ "See :doc:`../../installation_guide/intro_installation` for"
#~ " more information."
#~ msgstr ""

#~ msgid ""
#~ "Basic understanding of YAML "
#~ ":doc:`../../reference_appendices/YAMLSyntax`."
#~ msgstr ""

#~ msgid ""
#~ "Basic understanding of Jinja2 Templates. "
#~ "See :doc:`../../user_guide/playbooks_templating` for "
#~ "more information."
#~ msgstr ""

#~ msgid "Concepts"
#~ msgstr ""

#~ msgid ""
#~ "This section explains some fundamental "
#~ "concepts that you should understand when"
#~ " working with Ansible Networking."
#~ msgstr ""

#~ msgid "Structure"
#~ msgstr ""

#~ msgid "The examples on this page use the following structure:"
#~ msgstr ""

#~ msgid "Inventory, Connections, Credentials: Grouping Devices and Variables"
#~ msgstr ""

#~ msgid ""
#~ "An ``inventory`` file is an INI-"
#~ "like configuration file that defines the"
#~ " mapping of hosts into groups."
#~ msgstr ""

#~ msgid ""
#~ "Because Ansible is a flexible tool, "
#~ "there are a number of ways to "
#~ "specify connection information and "
#~ "credentials. We recommend using the "
#~ "``[my_group:vars]`` capability in your "
#~ "inventory file. Here's what it would "
#~ "look like if you specified your "
#~ "ssh passwords (encrypted with Ansible "
#~ "Vault) among your variables:"
#~ msgstr ""

#~ msgid ""
#~ "If you use ssh-agent, you do "
#~ "not need the ``ansible_ssh_pass`` lines. "
#~ "If you use ssh keys, but not "
#~ "ssh-agent, and you have multiple "
#~ "keys, specify the key to use for"
#~ " each connection in the ``[group:vars]``"
#~ " section with "
#~ "``ansible_ssh_private_key_file=/path/to/correct/key``. For "
#~ "more information on ``ansible_ssh_`` options"
#~ " see the :ref:`behavioral_parameters`."
#~ msgstr ""

#~ msgid ""
#~ "The \"Vault\" feature of Ansible allows"
#~ " you to keep sensitive data such "
#~ "as passwords or keys in encrypted "
#~ "files, rather than as plain text "
#~ "in your playbooks or roles. These "
#~ "vault files can then be distributed "
#~ "or placed in source control. See "
#~ ":doc:`../../user_guide/playbooks_vault` for more "
#~ "information."
#~ msgstr ""

#~ msgid "ansible_ssh_pass"
#~ msgstr ""

#~ msgid ""
#~ "Certain network platforms, such as eos"
#~ " and ios, have the concept of "
#~ "different privilege modes. Certain network "
#~ "modules, such as those that modify "
#~ "system state including users, will only"
#~ " work in high privilege states. "
#~ "Ansible version 2.5 added support for"
#~ " ``become`` when using ``connection: "
#~ "network_cli``. This allows privileges to "
#~ "be raised for the specific tasks "
#~ "that need them. Adding ``become: yes``"
#~ " and ``become_method: enable`` informs "
#~ "Ansible to go into privilege mode "
#~ "before executing the task, as shown "
#~ "here:"
#~ msgstr ""

#~ msgid "Playbook"
#~ msgstr ""

#~ msgid "Collect data"
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "**Create an inventory file**"
#~ msgstr ""

#~ msgid "**Create a playbook**"
#~ msgstr ""

#~ msgid "Running the playbook"
#~ msgstr ""

#~ msgid ""
#~ "If `ansible-playbook` fails, please "
#~ "follow the debug steps in "
#~ ":doc:`network_debug_troubleshooting`."
#~ msgstr ""

#~ msgid ""
#~ "If you receive an connection error "
#~ "please double check the inventory and"
#~ " Playbook for typos or missing lines."
#~ " If the issue still occurs follow "
#~ "the debug steps in "
#~ ":doc:`network_debug_troubleshooting`."
#~ msgstr ""

#~ msgid ":doc:`../../user_guide/intro_inventory`"
#~ msgstr ""

