# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/network/getting_started/network_differences.rst:3
msgid "How Network Automation is Different"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:5
msgid ""
"Network automation leverages the basic Ansible concepts, but there are "
"important differences in how the network modules work. This introduction "
"prepares you to understand the exercises in this guide."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:7
msgid "Topics"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:10
msgid "Execution on the Control Node"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:12
msgid ""
"Unlike most Ansible modules, network modules do not run on the managed "
"nodes. From a user's point of view, network modules work like any other "
"modules. They work with ad-hoc commands, playbooks, and roles. Behind the"
" scenes, however, network modules use a different methodology than the "
"other (Linux/Unix and Windows) modules use. Ansible is written and "
"executed in Python. Because the majority of network devices can not run "
"Python, the Ansible network modules are executed on the Ansible control "
"node, where ``ansible`` or ``ansible-playbook`` runs."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:14
msgid ""
"Network modules also use the control node as a destination for backup "
"files, for those modules that offer a ``backup`` option. With Linux/Unix "
"modules, where a configuration file already exists on the managed "
"node(s), the backup file gets written by default in the same directory as"
" the new, changed file. Network modules do not update configuration files"
" on the managed nodes, because network configuration is not written in "
"files. Network modules write backup files on the control node, usually in"
" the `backup` directory under the playbook root directory."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:17
msgid "Multiple Communication Protocols"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:19
msgid ""
"Because network modules execute on the control node instead of on the "
"managed nodes, they can support multiple communication protocols. The "
"communication protocol (XML over SSH, CLI over SSH, API over HTTPS) "
"selected for each network module depends on the platform and the purpose "
"of the module. Some network modules support only one protocol; some offer"
" a choice. The most common protocol is CLI over SSH. You set the "
"communication protocol with the ``ansible_connection`` variable:"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Value of ansible_connection"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Protocol"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Requires"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Persistent?"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "network_cli"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "CLI over SSH"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "network_os setting"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "yes"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "netconf"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "XML over SSH"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "httpapi"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "API over HTTP/HTTPS"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "local"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "depends on provider"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "provider setting"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "no"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:30
msgid ""
"Beginning with Ansible 2.6, we recommend using one of the persistent "
"connection types listed above instead of ``local``. With persistent "
"connections, you can define the hosts and credentials only once, rather "
"than in every task. For more details on using each connection type on "
"various platforms, see the :ref:`platform-specific <platform_options>` "
"pages."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:34
msgid "Modules Organized by Network Platform"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:36
msgid ""
"A network platform is a set of network devices with a common operating "
"system that can be managed by a collection of modules.  The modules for "
"each network platform share a prefix, for example:"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:38
msgid "Arista: ``eos_``"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:39
msgid "Cisco: ``ios_``, ``iosxr_``, ``nxos_``"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:40
msgid "Juniper: ``junos_``"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:41
msgid "VyOS ``vyos_``"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:43
msgid ""
"All modules within a network platform share certain requirements. Some "
"network platforms have specific differences - see the :ref:`platform-"
"specific <platform_options>` documentation for details."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:47
msgid "Privilege Escalation: ``enable`` mode, ``become``, and ``authorize``"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:49
msgid ""
"Several network platforms support privilege escalation, where certain "
"tasks must be done by a privileged user. On network devices this is "
"called ``enable`` mode (the equivalent of ``sudo`` in \\*nix "
"administration). Ansible network modules offer privilege escalation for "
"those network devices that support it. For details of which platforms "
"support ``enable`` mode, with examples of how to use it, see the :ref"
":`platform-specific <platform_options>` documentation."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:52
msgid "Using ``become`` for privilege escalation"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:54
msgid ""
"As of Ansible 2.6, you can use the top-level Ansible parameter ``become: "
"yes`` with ``become_method: enable`` to run a task, play, or playbook "
"with escalated privileges on any network platform that supports privilege"
" escalation. You must use either ``connection: network_cli`` or "
"``connection: httpapi`` with ``become: yes`` with ``become_method: "
"enable``. If you are using ``network_cli`` to connect Ansible to your "
"network devices, a ``group_vars`` file would look like:"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:64
msgid "Legacy playbooks: ``authorize`` for privilege escalation"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:66
msgid ""
"If you are running Ansible 2.5 or older, some network platforms support "
"privilege escalation but not ``network_cli`` or ``httpapi`` connections. "
"This includes all platforms in versions 2.4 and older, and HTTPS "
"connections using ``eapi`` in version 2.5. With a ``local`` connection, "
"you must use a ``provider`` dictionary and include ``authorize: yes`` and"
" ``auth_pass: my_enable_password``. For that use case, a ``group_vars`` "
"file looks like:"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:80
msgid "And you use the ``eapi`` variable in your task(s):"
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:95
msgid ""
"Note that while Ansible 2.6 supports the use of ``connection: local`` "
"with ``provider`` dictionaries, this usage will be deprecated in the "
"future and eventually removed."
msgstr ""

#: ../../rst/network/getting_started/network_differences.rst:97
msgid "For more information, see :ref:`Become and Networks<become_network>`"
msgstr ""

