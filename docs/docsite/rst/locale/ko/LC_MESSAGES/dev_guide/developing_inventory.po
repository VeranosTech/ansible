# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/dev_guide/developing_inventory.rst:5
msgid "Developing dynamic inventory"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:8
msgid "Topics"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:10
msgid ""
"As described in :ref:`dynamic_inventory`, Ansible can pull inventory "
"information from dynamic sources, including cloud sources, using the "
"supplied :ref:`inventory plugins <inventory_plugins>`. If the source you "
"want is not currently covered by existing plugins, you can create your "
"own as with any other plugin type."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:14
msgid ""
"In previous versions you had to create a script or program that can "
"output JSON in the correct format when invoked with the proper arguments."
" You can still use and write inventory scripts, as we ensured backwards "
"compatibility via the :ref:`script inventory plugin <script_inventory>` "
"and there is no restriction on the programming language used. If you "
"choose to write a script, however, you will need to implement some "
"features yourself. i.e caching, configuration management, dynamic "
"variable and group composition, etc. While with :ref:`inventory plugins "
"<inventory_plugins>` you can leverage the Ansible codebase to add these "
"common features."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:25
msgid "Inventory sources"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:27
msgid ""
"Inventory sources are strings (i.e what you pass to ``-i`` in the command"
" line), they can represent a path to a file/script or just be the raw "
"data for the plugin to use. Here are some plugins and the type of source "
"they use:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:32
msgid "Plugin"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:32
msgid "Source"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:34
msgid ":ref:`host list <host_list_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:34
msgid "A comma separated list of hosts"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:36
msgid ":ref:`yaml <yaml_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:36
msgid "Path to a YAML format data file"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:38
msgid ":ref:`constructed <constructed_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:38
#: ../../rst/dev_guide/developing_inventory.rst:42
msgid "Path to a YAML configuration file"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:40
msgid ":ref:`ini <ini_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:40
msgid "Path to an INI formatted data file"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:42
msgid ":ref:`virtualbox <virtualbox_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:44
msgid ":ref:`script plugin <script_inventory>`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:44
msgid "Path to an executable outputting JSON"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:51
msgid "Inventory plugins"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:53
msgid ""
"Like most plugin types (except modules) they must be developed in Python,"
" since they execute on the controller they should match the same "
"requirements :ref:`control_node_requirements`."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:55
msgid ""
"Most of the documentation in :ref:`developing_plugins` also applies here,"
" so as to not repeat ourselves, you should read that document first and "
"we'll include inventory plugin specifics next."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:57
msgid ""
"Inventory plugins normally only execute at the start of a run, before "
"playbooks/plays and roles are loaded, but they can be 're-executed' via "
"the ``meta: refresh_inventory`` task, which will clear out the existing "
"inventory and rebuild it."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:60
msgid ""
"When using the 'persistent' cache, inventory plugins can also use the "
"configured cache plugin to store and retrieve data to avoid costly "
"external calls."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:65
msgid "Developing an inventory plugin"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:67
msgid "The first thing you want to do is use the base class:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:77
msgid ""
"This class has a couple of methods each plugin should implement and a few"
" helpers for parsing the inventory source and updating the inventory."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:79
msgid ""
"After you have the basic plugin working you might want to to incorporate "
"other features by adding more base classes:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:89
msgid ""
"For the bulk of the work in the plugin, We mostly want to deal with 2 "
"methods ``verify_file`` and ``parse``."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:94
msgid "verify_file"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:96
msgid ""
"This method is used by Ansible to make a quick determination if the "
"inventory source is usable by the plugin. It does not need to be 100% "
"accurate as there might be overlap in what plugins can handle and Ansible"
" will try the enabled plugins (in order) by default."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:109
msgid ""
"In this case, from the :ref:`virtualbox inventory plugin "
"<virtualbox_inventory>`, we screen for specific file name patterns to "
"avoid attempting to consume any valid yaml file. You can add any type of "
"condition here, but the most common one is 'extension matching'. If you "
"implement extension matching for YAML configuration files the path suffix"
" <plugin_name>.<yml|yaml> should be accepted. All valid extensions should"
" be documented in the plugin description."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:111
msgid ""
"Another example that actually does not use a 'file' but the inventory "
"source string itself, from the :ref:`host list <host_list_inventory>` "
"plugin:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:126
msgid ""
"This method is just to expedite the inventory process and avoid "
"unnecessary parsing of sources that are easy to filter out before causing"
" a parse error."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:131
msgid "parse"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:133
msgid "This method does the bulk of the work in the plugin."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:135
msgid "It takes the following parameters:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:137
msgid ""
"inventory: inventory object with existing data and the methods to add "
"hosts/groups/variables to inventory"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:138
msgid ""
"loader: Ansible's DataLoader. The DataLoader can read files, auto load "
"JSON/YAML and decrypt vaulted data, and cache read files."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:139
msgid ""
"path: string with inventory source (this is usually a path, but is not "
"required)"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:140
msgid ""
"cache: indicates whether the plugin should use or avoid caches (cache "
"plugin and/or loader)"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:143
msgid "The base class does some minimal assignment for reuse in other methods."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:153
msgid ""
"It is up to the plugin now to deal with the inventory source provided and"
" translate that into the Ansible inventory. To facilitate this, the "
"example below uses a few helper functions:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:190
msgid ""
"The specifics will vary depending on API and structure returned. But one "
"thing to keep in mind, if the inventory source or any other issue crops "
"up you should ``raise AnsibleParserError`` to let Ansible know that the "
"source was invalid or the process failed."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:192
msgid ""
"For examples on how to implement an inventory plugin, see the source code"
" here: `lib/ansible/plugins/inventory "
"<https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/inventory>`_."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:198
msgid "inventory cache"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:200
msgid ""
"Extend the inventory plugin documentation with the inventory_cache "
"documentation fragment and use the Cacheable base class to have the "
"caching system at your disposal."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:213
msgid ""
"Next, load the cache plugin specified by the user to read from and update"
" the cache. If your inventory plugin uses YAML based configuration files "
"and the ``_read_config_data`` method, the cache plugin is loaded within "
"that method. If your inventory plugin does not use ``_read_config_data``,"
" you must load the cache explicitly with ``load_cache_plugin``."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:224
msgid ""
"Before using the cache, retrieve a unique cache key using the "
"``get_cache_key`` method. This needs to be done by all inventory modules "
"using the cache, so you don't use/overwrite other parts of the cache."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:234
msgid ""
"Now that you've enabled caching, loaded the correct plugin, and retrieved"
" a unique cache key, you can set up the flow of data between the cache "
"and your inventory using the ``cache`` parameter of the ``parse`` method."
" This value comes from the inventory manager and indicates whether the "
"inventory is being refreshed (such as via ``--flush-cache`` or the meta "
"task ``refresh_inventory``). Although the cache shouldn't be used to "
"populate the inventory when being refreshed, the cache should be updated "
"with the new inventory if the user has enabled caching. You can use "
"``self._cache`` like a dictionary. The following pattern allows "
"refreshing the inventory to work in conjunction with caching."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:269
msgid ""
"After the ``parse`` method is complete, the contents of ``self._cache`` "
"is used to set the cache plugin if the contents of the cache have "
"changed."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:274
msgid "You have three other cache methods available:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:272
msgid ""
"``set_cache_plugin`` forces the cache plugin to be set with the contents "
"of ``self._cache`` before the ``parse`` method completes"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:273
msgid ""
"``update_cache_if_changed`` sets the cache plugin only if ``self._cache``"
" has been modified before the ``parse`` method completes"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:274
msgid "``clear_cache`` deletes the keys in ``self._cache`` from your cache plugin"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:279
msgid "Inventory source common format"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:281
msgid ""
"To simplify development, most plugins use a mostly standard configuration"
" file as the inventory source, YAML based and with just one required "
"field ``plugin`` which should contain the name of the plugin that is "
"expected to consume the file. Depending on other common features used, "
"other fields might be needed, but each plugin can also add its own custom"
" options as needed. For example, if you use the integrated caching, "
"``cache_plugin``, ``cache_timeout`` and other cache related fields could "
"be present."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:288
msgid "The 'auto' plugin"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:290
msgid ""
"Since Ansible 2.5, we include the :ref:`auto inventory plugin "
"<auto_inventory>` enabled by default, which itself just loads other "
"plugins if they use the common YAML configuration format that specifies a"
" ``plugin`` field that matches an inventory plugin name, this makes it "
"easier to use your plugin w/o having to update configurations."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:297
msgid "Inventory scripts"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:299
msgid ""
"Even though we now have inventory plugins, we still support inventory "
"scripts, not only for backwards compatibility but also to allow users to "
"leverage other programming languages."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:305
msgid "Inventory script conventions"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:307
msgid ""
"Inventory scripts must accept the ``--list`` and ``--host <hostname>`` "
"arguments, other arguments are allowed but Ansible will not use them. "
"They might still be useful for when executing the scripts directly."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:310
msgid ""
"When the script is called with the single argument ``--list``, the script"
" must output to stdout a JSON-encoded hash or dictionary containing all "
"of the groups to be managed. Each group's value should be either a hash "
"or dictionary containing a list of each host, any child groups, and "
"potential group variables, or simply a list of hosts::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:334
msgid ""
"If any of the elements of a group are empty they may be omitted from the "
"output."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:336
msgid ""
"When called with the argument ``--host <hostname>`` (where <hostname> is "
"a host from above), the script must print either an empty JSON "
"hash/dictionary, or a hash/dictionary of variables to make available to "
"templates and playbooks. For example::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:344
msgid ""
"Printing variables is optional. If the script does not do this, it should"
" print an empty hash or dictionary."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:349
msgid "Tuning the external inventory script"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:353
msgid ""
"The stock inventory script system detailed above works for all versions "
"of Ansible, but calling ``--host`` for every host can be rather "
"inefficient, especially if it involves API calls to a remote subsystem."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:357
msgid ""
"To avoid this inefficiency, if the inventory script returns a top level "
"element called \"_meta\", it is possible to return all of the host "
"variables in one script execution. When this meta element contains a "
"value for \"hostvars\", the inventory script will not be invoked with "
"``--host`` for each host. This results in a significant performance "
"increase for large numbers of hosts."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:363
msgid "The data to be added to the top level JSON dictionary looks like this::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:382
msgid ""
"To satisfy the requirements of using ``_meta``, to prevent ansible from "
"calling your inventory with ``--host`` you must at least populate "
"``_meta`` with an empty ``hostvars`` dictionary. For example::"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:398
msgid ""
"If you intend to replace an existing static inventory file with an "
"inventory script, it must return a JSON object which contains an 'all' "
"group that includes every host in the inventory as a member and every "
"group in the inventory as a child. It should also include an 'ungrouped' "
"group which contains all hosts which are not members of any other group. "
"A skeleton example of this JSON object is:"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:421
msgid ""
"An easy way to see how this should look is using :ref:`ansible-"
"inventory`, which also supports ``--list`` and ``--host`` parameters like"
" an inventory script would."
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:425
msgid ":ref:`developing_api`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:426
msgid "Python API to Playbooks and Ad Hoc Task Execution"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:427
msgid ":ref:`developing_modules_general`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:428
msgid "Get started with developing a module"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:429
msgid ":ref:`developing_plugins`"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:430
msgid "How to develop plugins"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:431
msgid "`Ansible Tower <https://www.ansible.com/products/tower>`_"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:432
msgid "REST API endpoint and GUI for Ansible, syncs with dynamic inventory"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:433
msgid ""
"`Development Mailing List <https://groups.google.com/group/ansible-"
"devel>`_"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:434
msgid "Mailing list for development topics"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:435
msgid "`irc.freenode.net <http://irc.freenode.net>`_"
msgstr ""

#: ../../rst/dev_guide/developing_inventory.rst:436
msgid "#ansible IRC chat channel"
msgstr ""

#~ msgid ""
#~ "Like most plugin types (except modules)"
#~ " they must be developed in Python,"
#~ " since they execute on the controller"
#~ " they should match the same "
#~ "requirements :ref:`control_machine_requirements`."
#~ msgstr ""

#~ msgid ""
#~ "It is up to the plugin now "
#~ "to deal with the inventory source "
#~ "provided and translate that into the "
#~ "Ansible inventory. To facilitate this "
#~ "there are a few of helper "
#~ "functions used in the example below:"
#~ msgstr ""

#~ msgid ""
#~ "For examples on how to implement "
#~ "an inventory plug in, see the "
#~ "source code here: `lib/ansible/plugins/inventory "
#~ "<https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/inventory>`_."
#~ msgstr ""

#~ msgid ""
#~ "If you intend to replace an "
#~ "existing static inventory file with an"
#~ " inventory script, it must return a"
#~ " JSON object which contains an 'all'"
#~ " group that includes every host in"
#~ " the inventory as a member and "
#~ "every group in the inventory as a"
#~ " child. It should also include an "
#~ "'ungrouped' group which contains all "
#~ "hosts which are not members of any"
#~ " other group. A skeleton example of"
#~ " this JSON object is::"
#~ msgstr ""

#~ msgid ":doc:`developing_api`"
#~ msgstr ""

#~ msgid ":doc:`developing_modules`"
#~ msgstr ""

#~ msgid "How to develop modules"
#~ msgstr ""

#~ msgid ":doc:`developing_plugins`"
#~ msgstr ""

