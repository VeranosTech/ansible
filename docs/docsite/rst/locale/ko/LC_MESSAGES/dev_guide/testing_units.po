# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/dev_guide/testing_units.rst:7
msgid "Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:9
msgid ""
"Unit tests are small isolated tests that target a specific library or "
"module.  Unit tests in Ansible are currently the only way of driving "
"tests from python within Ansible's continuous integration process. This "
"means that in some circumstances the tests may be a bit wider than just "
"units."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:14
msgid "Topics"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:17
msgid "Available Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:19
msgid ""
"Unit tests can be found in `test/units "
"<https://github.com/ansible/ansible/tree/devel/test/units>`_. Notice that"
" the directory structure of the tests matches that of ``lib/ansible/``."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:24
msgid "Running Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:26
msgid "The Ansible unit tests can be run across the whole code base by doing:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:34
msgid "Against a single file by doing:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:40
msgid "Or against a specific Python version by doing:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:47
msgid "For advanced usage see the online help::"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:51
msgid ""
"You can also run tests in Ansible's continuous integration system by "
"opening a pull request.  This will automatically determine which tests to"
" run based on the changes made in your pull request."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:57
msgid "Installing dependencies"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:59
msgid ""
"``ansible-test`` has a number of dependencies. For ``units`` tests we "
"suggest using ``tox``."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:61
msgid ""
"The dependencies can be installed using the ``--requirements`` argument, "
"which will install all the required dependencies needed for unit tests. "
"For example:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:69
msgid "tox version requirement"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:71
msgid "When using ``ansible-test`` with ``--tox`` requires tox >= 2.5.0"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:74
msgid ""
"The full list of requirements can be found at `test/runner/requirements "
"<https://github.com/ansible/ansible/tree/devel/test/runner/requirements>`_."
" Requirements files are named after their respective commands. See also "
"the `constraints "
"<https://github.com/ansible/ansible/blob/devel/test/runner/requirements/constraints.txt>`_"
" applicable to all commands."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:82
msgid "Extending unit tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:85
msgid "What a unit test isn't"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:87
msgid ""
"If you start writing a test that requires external services then you may "
"be writing an integration test, rather than a unit test."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:92
msgid "Structuring Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:94
msgid ""
"Ansible drives unit tests through `pytest "
"<https://docs.pytest.org/en/latest/>`_. This means that tests can either "
"be written a simple functions which are included in any file name like "
"``test_<something>.py`` or as classes."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:98
msgid "Here is an example of a function::"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:108
msgid "Here is an example of a class::"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:128
msgid ""
"Both methods work fine in most circumstances; the function-based "
"interface is simpler and quicker and so that's probably where you should "
"start when you are just trying to add a few basic tests for a module.  "
"The class-based test allows more tidy set up and tear down of pre-"
"requisites, so if you have many test cases for your module you may want "
"to refactor to use that."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:134
msgid ""
"Assertions using the simple ``assert`` function inside the tests will "
"give full information on the cause of the failure with a trace-back of "
"functions called during the assertion.  This means that plain asserts are"
" recommended over other external assertion libraries."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:139
msgid ""
"A number of the unit test suites include functions that are shared "
"between several modules, especially in the networking arena.  In these "
"cases a file is created in the same directory, which is then included "
"directly."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:145
msgid "Module test case common code"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:147
msgid ""
"Keep common code as specific as possible within the `test/units/` "
"directory structure. For example, if it's specific to testing Amazon "
"modules, it should be in `test/units/modules/cloud/amazon/`. Don't import"
" common unit test code from directories outside the current or parent "
"directories."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:152
msgid ""
"Don't import other unit tests from a unit test. Any common code should be"
" in dedicated files that aren't themselves tests."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:157
msgid "Fixtures files"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:159
msgid ""
"To mock out fetching results from devices, or provide other complex "
"datastructures that come from external libraries, you can use "
"``fixtures`` to read in pre-generated data."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:162
msgid "Text files live in ``test/units/modules/network/PLATFORM/fixtures/``"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:164
msgid "Data is loaded using the ``load_fixture`` method"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:166
msgid ""
"See `eos_banner test "
"<https://github.com/ansible/ansible/blob/devel/test/units/modules/network/eos/test_eos_banner.py>`_"
" for a practical example."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:170
msgid ""
"If you are simulating APIs you may find that python placebo is useful.  "
"See :ref:`testing_units_modules` for more information."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:175
msgid "Code Coverage For New or Updated Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:176
msgid ""
"New code will be missing from the codecov.io coverage reports (see "
":doc:`testing`), so local reporting is needed.  Most ``ansible-test`` "
"commands allow you to collect code coverage; this is particularly useful "
"when to indicate where to extend testing."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:180
msgid ""
"To collect coverage data add the ``--coverage`` argument to your "
"``ansible-test`` command line:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:187
msgid "Results will be written to ``test/results/reports/coverage/index.html``"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:189
msgid "Reports can be generated in several different formats:"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:191
msgid "``ansible-test coverage report`` - Console report."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:192
msgid "``ansible-test coverage html`` - HTML report."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:193
msgid "``ansible-test coverage xml`` - XML report."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:195
msgid ""
"To clear data between test runs, use the ``ansible-test coverage erase`` "
"command.  See :ref:`testing_running_locally` for more information about "
"generating coverage reports."
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:202
msgid ":ref:`testing_units_modules`"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:203
msgid "Special considerations for unit testing modules"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:204
msgid ":doc:`testing_running_locally`"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:205
msgid "Running tests locally including gathering and reporting coverage data"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:206
msgid ""
"`Python 3 documentation - 26.4. unittest — Unit testing framework "
"<https://docs.python.org/3/library/unittest.html>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:207
msgid "The documentation of the unittest framework in python 3"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:208
msgid ""
"`Python 2 documentation - 25.3. unittest — Unit testing framework "
"<https://docs.python.org/3/library/unittest.html>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:209
msgid ""
"The documentation of the earliest supported unittest framework - from "
"Python 2.6"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:210
msgid ""
"`pytest: helps you write better programs "
"<https://docs.pytest.org/en/latest/>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units.rst:211
msgid ""
"The documentation of pytest - the framework actually used to run Ansible "
"unit tests"
msgstr ""

