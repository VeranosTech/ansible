# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/dev_guide/developing_modules_general_windows.rst:5
msgid "Windows module development walkthrough"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:7
msgid ""
"In this section, we will walk through developing, testing, and debugging "
"an Ansible Windows module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:10
msgid ""
"Because Windows modules are written in Powershell and need to be run on a"
" Windows host, this guide differs from the usual development walkthrough "
"guide."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:13
msgid "What's covered in this section:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:20
msgid "Windows environment setup"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:22
msgid ""
"Unlike Python module development which can be run on the host that runs "
"Ansible, Windows modules need to be written and tested for Windows hosts."
" While evaluation editions of Windows can be downloaded from Microsoft, "
"these images are usually not ready to be used by Ansible without further "
"modification. The easiest way to set up a Windows host so that it is "
"ready to by used by Ansible is to set up a virtual machine using Vagrant."
" Vagrant can be used to download existing OS images called *boxes* that "
"are then deployed to a hypervisor like VirtualBox. These boxes can either"
" be created and stored offline or they can be downloaded from a central "
"repository called Vagrant Cloud."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:33
#, python-format
msgid ""
"This guide will use the Vagrant boxes created by the `packer-windoze "
"<https://github.com/jborean93/packer-windoze>`_ repository which have "
"also been uploaded to `Vagrant Cloud "
"<https://app.vagrantup.com/boxes/search?utf8=%E2%9C%93&sort=downloads&provider=&q=jborean93>`_."
" To find out more info on how these images are created, please go to the "
"GitHub repo and look at the ``README`` file."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:38
msgid ""
"Before you can get started, the following programs must be installed "
"(please consult the Vagrant and VirtualBox documentation for installation"
" instructions):"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:41
msgid "Vagrant"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:42
msgid "VirtualBox"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:45
msgid "Create a Windows server in a VM"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:47
msgid "To create a single Windows Server 2016 instance, run the following:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:54
msgid ""
"This will download the Vagrant box from Vagrant Cloud and add it to the "
"local boxes on your host and then start up that instance in VirtualBox. "
"When starting for the first time, the Windows VM will run through the "
"sysprep process and then create a HTTP and HTTPS WinRM listener "
"automatically. Vagrant will finish its process once the listeners are "
"online, after which the VM can be used by Ansible."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:61
msgid "Create an Ansible inventory"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:63
msgid ""
"The following Ansible inventory file can be used to connect to the newly "
"created Windows VM:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:79
msgid ""
"The port ``55986`` is automatically forwarded by Vagrant to the Windows "
"host that was created, if this conflicts with an existing local port then"
" Vagrant will automatically use another one at random and display show "
"that in the output."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:84
msgid ""
"The OS that is created is based on the image set. The following images "
"can be used:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:87
msgid ""
"`jborean93/WindowsServer2008-x86 "
"<https://app.vagrantup.com/jborean93/boxes/WindowsServer2008-x86>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:88
msgid ""
"`jborean93/WindowsServer2008-x64 "
"<https://app.vagrantup.com/jborean93/boxes/WindowsServer2008-x64>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:89
msgid ""
"`jborean93/WindowsServer2008R2 "
"<https://app.vagrantup.com/jborean93/boxes/WindowsServer2008R2>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:90
msgid ""
"`jborean93/WindowsServer2012 "
"<https://app.vagrantup.com/jborean93/boxes/WindowsServer2012>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:91
msgid ""
"`jborean93/WindowsServer2012R2 "
"<https://app.vagrantup.com/jborean93/boxes/WindowsServer2012R2>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:92
msgid ""
"`jborean93/WindowsServer2016 "
"<https://app.vagrantup.com/jborean93/boxes/WindowsServer2016>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:94
msgid ""
"When the host is online, it can accessible by RDP on ``127.0.0.1:3389`` "
"but the port may differ depending if there was a conflict. To get rid of "
"the host, run ``vagrant destroy --force`` and Vagrant will automatically "
"remove the VM and any other files associated with that VM."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:99
msgid ""
"While this is useful when testing modules on a single Windows instance, "
"these host won't work without modification with domain based modules. The"
" Vagrantfile at `ansible-windows <https://github.com/jborean93/ansible-"
"windows/tree/master/vagrant>`_ can be used to create a test domain "
"environment to be used in Ansible. This repo contains three files which "
"are used by both Ansible and Vagrant to create multiple Windows hosts in "
"a domain environment. These files are:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:106
msgid ""
"``Vagrantfile``: The Vagrant file that reads the inventory setup of "
"``inventory.yml`` and provisions the hosts that are required"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:107
msgid ""
"``inventory.yml``: Contains the hosts that are required and other "
"connection information such as IP addresses and forwarded ports"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:108
msgid ""
"``main.yml``: Ansible playbook called by Vagrant to provision the domain "
"controller and join the child hosts to the domain"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:110
msgid "By default, these files will create the following environment:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:112
msgid "A single domain controller running on Windows Server 2016"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:113
msgid ""
"Five child hosts for each major Windows Server version joined to that "
"domain"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:114
msgid "A domain with the DNS name ``domain.local``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:115
msgid ""
"A local administrator account on each host with the username ``vagrant`` "
"and password ``vagrant``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:116
msgid ""
"A domain admin account ``vagrant-domain@domain.local`` with the password "
"``VagrantPass1``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:118
msgid ""
"The domain name and accounts can be modified by changing the variables "
"``domain_*`` in the ``inventory.yml`` file if it is required. The "
"inventory file can also be modified to provision more or less servers by "
"changing the hosts that are defined under the ``domain_children`` key. "
"The host variable ``ansible_host`` is the private IP that will be "
"assigned to the VirtualBox host only network adapter while "
"``vagrant_box`` is the box that will be used to create the VM."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:127
msgid "Provisioning the environment"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:129
msgid "To provision the environment as is, run the following:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:137
msgid ""
"Vagrant provisions each host sequentially so this can take some time to "
"complete. If any errors occur during the Ansible phase of setting up the "
"domain, run ``vagrant provision`` to rerun just that step."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:141
msgid ""
"Unlike setting up a single Windows instance with Vagrant, these hosts can"
" also be accessed using the IP address directly as well as through the "
"forwarded ports. It is easier to access it over the host only network "
"adapter as the normal protocol ports are used, e.g. RDP is still over "
"``3389``. In cases where the host cannot be resolved using the host only "
"network IP, the following protocols can be access over ``127.0.0.1`` "
"using these forwarded ports:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:148
msgid "``RDP``: 295xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:149
msgid "``SSH``: 296xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:150
msgid "``WinRM HTTP``: 297xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:151
msgid "``WinRM HTTPS``: 298xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:152
msgid "``SMB``: 299xx"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:154
msgid ""
"Replace ``xx`` with the entry number in the inventory file where the "
"domain controller started with ``00`` and is incremented from there. For "
"example, in the default ``inventory.yml`` file, WinRM over HTTPS for "
"``SERVER2012R2`` is forwarded over port ``29804`` as it's the fourth "
"entry in ``domain_children``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:159
msgid ""
"While an SSH server is available on all Windows hosts but Server 2008 "
"(non R2), it is not a support connection for Ansible managing Windows "
"hosts and should not be used with Ansible."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:164
msgid "Windows new module development"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:166
msgid "When creating a new module there are a few things to keep in mind:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:168
msgid ""
"Module code is in Powershell (.ps1) files while the documentation is "
"contained in Python (.py) files of the same name"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:169
msgid ""
"Avoid using ``Write-Host/Debug/Verbose/Error`` in the module and add what"
" needs to be returned to the ``$module.Result`` variable"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:170
msgid ""
"To fail a module, call ``$module.FailJson(\"failure message here\")``, an"
" Exception or ErrorRecord can be set to the second argument for a more "
"descriptive error message"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:171
msgid ""
"You can pass in the exception or ErrorRecord as a second argument to "
"``FailJson(\"failure\", $_)`` to get a more detailed output"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:172
msgid ""
"Most new modules require check mode and integration tests before they are"
" merged into the main Ansible codebase"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:173
msgid ""
"Avoid using try/catch statements over a large code block, rather use them"
" for individual calls so the error message can be more descriptive"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:174
msgid "Try and catch specific exceptions when using try/catch statements"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:175
msgid "Avoid using PSCustomObjects unless necessary"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:176
msgid ""
"Look for common functions in ``./lib/ansible/module_utils/powershell/`` "
"and use the code there instead of duplicating work. These can be imported"
" by adding the line ``#Requires -Module *`` where * is the filename to "
"import, and will be automatically included with the module code sent to "
"the Windows target when run via Ansible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:177
msgid ""
"As well as PowerShell module utils, C# module utils are stored in "
"``./lib/ansible/module_utils/csharp/`` and are automatically imported in "
"a module execution if the line ``#AnsibleRequires -CSharpUtil *`` is "
"present"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:178
msgid ""
"C# and PowerShell module utils achieve the same goal but C# allows a "
"developer to implement low level tasks, such as calling the Win32 API, "
"and can be faster in some cases"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:179
msgid ""
"Ensure the code runs under Powershell v3 and higher on Windows Server "
"2008 and higher; if higher minimum Powershell or OS versions are "
"required, ensure the documentation reflects this clearly"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:180
msgid ""
"Ansible runs modules under strictmode version 2.0. Be sure to test with "
"that enabled by putting ``Set-StrictMode -Version 2.0`` at the top of "
"your dev script"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:181
msgid "Favour native Powershell cmdlets over executable calls if possible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:182
msgid ""
"Use the full cmdlet name instead of aliases, e.g. ``Remove-Item`` over "
"``rm``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:183
msgid ""
"Use named parameters with cmdlets, e.g. ``Remove-Item -Path C:\\temp`` "
"over ``Remove-Item C:\\temp``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:185
msgid ""
"A very basic powershell module `win_environment "
"<https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/windows/win_environment.ps1>`_"
" is included below. It demonstrates how to implement check-mode and diff-"
"support, and also shows a warning to the user when a specific condition "
"is met."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:193
msgid ""
"A slightly more advanced module is `win_uri "
"<https://github.com/ansible/ansible/blob/devel/lib/ansible/modules/windows/win_uri.ps1>`_"
" which additionally shows how to use different parameter types (bool, "
"str, int, list, dict, path) and a selection of choices for parameters, "
"how to fail a module and how to handle exceptions."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:195
msgid ""
"As part of the new ``AnsibleModule`` wrapper, the input parameters are "
"defined and validated based on an argument spec. The following options "
"can be set at the root level of the argument spec:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:198
msgid ""
"``mutually_exclusive``: A list of lists, where the inner list contains "
"module options that cannot be set together"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:199
msgid ""
"``no_log``: Stops the module from emitting any logs to the Windows Event "
"log"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:200
msgid ""
"``options``: A dictionary where the key is the module option and the "
"value is the spec for that option"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:201
msgid ""
"``required_by``: A dictionary where the option(s) specified by the value "
"must be set if the option specified by the key is also set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:205
msgid ""
"``required_if``: A list of lists where the inner list contains 3 or 4 "
"elements;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:203
msgid "The first element is the module option to check the value against"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:204
msgid ""
"The second element is the value of the option specified by the first "
"element, if matched then the required if check is run"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:205
msgid ""
"The third element is a list of required module options when the above is "
"matched"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:206
msgid ""
"An optional fourth element is a boolean that states whether all module "
"options in the third elements are required (default: ``$false``) or only "
"one (``$true``)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:207
msgid ""
"``required_one_of``: A list of lists, where the inner list contains "
"module options where at least one must be set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:208
msgid ""
"``required_together``: A list of lists, where the inner list contains "
"module options that must be set together"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:209
msgid ""
"``supports_check_mode``: Whether the module supports check mode, by "
"default this is ``$false``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:211
msgid ""
"The actual input options for a module are set within the ``options`` "
"value as a dictionary. The keys of this dictionary are the module option "
"names while the values are the spec of that module option. Each spec can "
"have the following options set:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:215
msgid "``aliases``: A list of aliases for the module option"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:216
msgid ""
"``choices``: A list of valid values for the module option, if "
"``type=list`` then each list value is validated against the choices and "
"not the list itself"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:217
msgid "``default``: The default value for the module option if not set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:218
msgid ""
"``elements``: When ``type=list``, this sets the type of each list value, "
"the values are the same as ``type``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:219
msgid ""
"``no_log``: Will sanitise the input value before being returned in the "
"``module_invocation`` return value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:220
msgid ""
"``removed_in_version``: States when a deprecated module option is to be "
"removed, a warning is displayed to the end user if set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:221
msgid "``required``: Will fail when the module option is not set"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:232
msgid ""
"``type``: The type of the module option, if not set then it defaults to "
"``str``. The valid types are;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:223
msgid "``bool``: A boolean value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:224
msgid ""
"``dict``: A dictionary value, if the input is a JSON or key=value string "
"then it is converted to dictionary"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:225
msgid ""
"``float``: A float or `Single <https://docs.microsoft.com/en-"
"us/dotnet/api/system.single?view=netframework-4.7.2>`_ value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:226
msgid "``int``: An Int32 value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:227
msgid ""
"``json``: A string where the value is converted to a JSON string if the "
"input is a dictionary"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:228
msgid ""
"``list``: A list of values, ``elements=<type>`` can convert the "
"individual list value types if set. If ``elements=dict`` then ``options``"
" is defined, the values will be validated against the argument spec. When"
" the input is a string then the string is split by ``,`` and any "
"whitespace is trimmed"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:229
msgid ""
"``path``: A string where values likes ``%TEMP%`` are expanded based on "
"environment values. If the input value starts with ``\\\\?\\`` then no "
"expansion is run"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:230
msgid "``raw``: No conversions occur on the value passed in by Ansible"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:231
msgid ""
"``sid``: Will convert Windows security identifier values or Windows "
"account names to a `SecurityIdentifier <https://docs.microsoft.com/en-"
"us/dotnet/api/system.security.principal.securityidentifier?view=netframework-4.7.2>`_"
" value"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:232
msgid "``str``: The value is converted to a string"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:234
msgid ""
"When ``type=dict``, or ``type=list`` and ``elements=dict``, the following"
" keys can also be set for that module option:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:236
msgid ""
"``apply_defaults``: The value is based on the ``options`` spec defaults "
"for that key if ``True`` and null if ``False``. Only valid when the "
"module option is not defined by the user and ``type=dict``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:237
msgid ""
"``mutually_exclusive``: Same as the root level ``mutually_exclusive`` but"
" validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:238
msgid ""
"``options``: Same as the root level ``options`` but contains the valid "
"options for the sub option"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:239
msgid ""
"``required_if``: Same as the root level ``required_if`` but validated "
"against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:240
msgid ""
"``required_by``: Same as the root level ``required_by`` but validated "
"against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:241
msgid ""
"``required_together``: Same as the root level ``required_together`` but "
"validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:242
msgid ""
"``required_one_of``: Same as the root level ``required_one_of`` but "
"validated against the values in the sub dict"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:244
msgid ""
"A module type can also be a delegate function that converts the value to "
"whatever is required by the module option. For example the following "
"snippet shows how to create a custom type that creates a ``UInt64`` "
"value:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:254
msgid ""
"When in doubt, look at some of the other core modules and see how things "
"have been implemented there."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:257
msgid ""
"Sometimes there are multiple ways that Windows offers to complete a task;"
" this is the order to favour when writing modules:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:260
msgid "Native Powershell cmdlets like ``Remove-Item -Path C:\\temp -Recurse``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:261
msgid ".NET classes like ``[System.IO.Path]::GetRandomFileName()``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:262
msgid "WMI objects through the ``New-CimInstance`` cmdlet"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:263
msgid "COM objects through ``New-Object -ComObject`` cmdlet"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:264
msgid "Calls to native executables like ``Secedit.exe``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:266
msgid ""
"PowerShell modules support a small subset of the ``#Requires`` options "
"built into PowerShell as well as some Ansible-specific requirements "
"specified by ``#AnsibleRequires``. These statements can be placed at any "
"point in the script, but are most commonly near the top. They are used to"
" make it easier to state the requirements of the module without writing "
"any of the checks. Each ``requires`` statement must be on its own line, "
"but there can be multiple requires statements in one script."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:274
msgid "These are the checks that can be used within Ansible modules:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:276
msgid ""
"``#Requires -Module Ansible.ModuleUtils.<module_util>``: Added in Ansible"
" 2.4, specifies a module_util to load in for the module execution."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:277
msgid ""
"``#Requires -Version x.y``: Added in Ansible 2.5, specifies the version "
"of PowerShell that is required by the module. The module will fail if "
"this requirement is not met."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:278
msgid ""
"``#AnsibleRequires -OSVersion x.y``: Added in Ansible 2.5, specifies the "
"OS build version that is required by the module and will fail if this "
"requirement is not met. The actual OS version is derived from "
"``[Environment]::OSVersion.Version``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:279
msgid ""
"``#AnsibleRequires -Become``: Added in Ansible 2.5, forces the exec "
"runner to run the module with ``become``, which is primarily used to "
"bypass WinRM restrictions. If ``ansible_become_user`` is not specified "
"then the ``SYSTEM`` account is used instead."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:280
msgid ""
"``#AnsibleRequires -CSharpUtil Ansible.<module_util>``: Added in Ansible "
"2.8, specifies a C# module_util to load in for the module execution."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:282
msgid ""
"C# module utils can reference other C# utils by adding the line ``using "
"Ansible.<module_util>;`` to the top of the script with all the other "
"using statements."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:288
msgid "Windows module utilities"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:290
msgid ""
"Like Python modules, PowerShell modules also provide a number of module "
"utilities that provide helper functions within PowerShell. These "
"module_utils can be imported by adding the following line to a PowerShell"
" module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:298
msgid ""
"This will import the module_util at "
"``./lib/ansible/module_utils/powershell/Ansible.ModuleUtils.Legacy.psm1``"
" and enable calling all of its functions. As of Ansible 2.8, Windows "
"module utils can also be written in C# and stored at "
"``lib/ansible/module_utils/csharp``. These module_utils can be imported "
"by adding the following line to a PowerShell module:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:308
msgid ""
"This will import the module_util at "
"``./lib/ansible/module_utils/csharp/Ansible.Basic.cs`` and automatically "
"load the types in the executing process. C# module utils can reference "
"each other and be loaded together by adding the following line to the "
"using statements at the top of the util:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:317
msgid ""
"There are special comments that can be set in a C# file for controlling "
"the compilation parameters. The following comments can be added to the "
"script;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:320
msgid ""
"``//AssemblyReference -Name <assembly dll> [-CLR [Core|Framework]]``: The"
" assembly DLL to reference during compilation, the optional ``-CLR`` flag"
" can also be used to state whether to reference when running under .NET "
"Core, Framework, or both (if omitted)"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:321
msgid ""
"``//NoWarn -Name <error id> [-CLR [Core|Framework]]``: A compiler warning"
" ID to ignore when compiling the code, the optional ``-CLR`` works the "
"same as above. A list of warnings can be found at `Compiler errors "
"<https://docs.microsoft.com/en-us/dotnet/csharp/language-reference"
"/compiler-messages/index>`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:323
msgid "As well as this, the following pre-processor symbols are defined;"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:325
msgid ""
"``CORECLR``: This symbol is present when PowerShell is running through "
".NET Core"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:326
msgid "``WINDOWS``: This symbol is present when PowerShell is running on Windows"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:327
msgid "``UNIX``: This symbol is present when PowerShell is running on Unix"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:329
msgid ""
"A combination of these flags help to make a module util interoperable on "
"both .NET Framework and .NET Core, here is an example of them in action:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:350
msgid ""
"The following is a list of module_utils that are packaged with Ansible "
"and a general description of what they do:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:353
msgid ""
"ArgvParser: Utiliy used to convert a list of arguments to an escaped "
"string compliant with the Windows argument parsing rules."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:354
msgid ""
"CamelConversion: Utility used to convert camelCase strings/lists/dicts to"
" snake_case."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:355
msgid ""
"CommandUtil: Utility used to execute a Windows process and return the "
"stdout/stderr and rc as separate objects."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:356
msgid ""
"FileUtil: Utility that expands on the ``Get-ChildItem`` and ``Test-Path``"
" to work with special files like ``C:\\pagefile.sys``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:357
msgid "Legacy: General definitions and helper utilities for Ansible module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:358
msgid ""
"LinkUtil: Utility to create, remove, and get information about symbolic "
"links, junction points and hard inks."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:359
msgid ""
"SID: Utilities used to convert a user or group to a Windows SID and vice "
"versa."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:361
msgid ""
"For more details on any specific module utility and their requirements, "
"please see the `Ansible module utilities source code "
"<https://github.com/ansible/ansible/tree/devel/lib/ansible/module_utils/powershell>`_."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:364
msgid ""
"PowerShell module utilities can be stored outside of the standard Ansible"
" distribution for use with custom modules. Custom module_utils are placed"
" in a folder called ``module_utils`` located in the root folder of the "
"playbook or role directory."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:369
msgid ""
"C# module utilities can also be stored outside of the standard Ansible "
"distribution for use with custom modules. Like PowerShell utils, these "
"are stored in a folder called ``module_utils`` and the filename must end "
"in the extension ``.cs``, start with ``Ansible.``  and be named after the"
" namespace defined in the util."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:373
msgid ""
"The below example is a role structure that contains two PowerShell custom"
" module_utils called ``Ansible.ModuleUtils.ModuleUtil1``, "
"``Ansible.ModuleUtils.ModuleUtil2``, and a C# util containing the "
"namespace ``Ansible.CustomUtil``::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:388
msgid ""
"Each PowerShell module_util must contain at least one function that has "
"been exported with ``Export-ModuleMember`` at the end of the file. For "
"example"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:397
msgid "Windows playbook module testing"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:399
msgid "You can test a module with an Ansible playbook. For example:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:401
msgid "Create a playbook in any directory ``touch testmodule.yml``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:402
msgid "Create an inventory file in the same directory ``touch hosts``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:403
msgid ""
"Populate the inventory file with the variables required to connect to a "
"Windows host(s)."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:404
msgid "Add the following to the new playbook file::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:414
msgid "Run the playbook ``ansible-playbook -i hosts testmodule.yml``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:416
msgid ""
"This can be useful for seeing how Ansible runs with the new module end to"
" end. Other possible ways to test the module are shown below."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:422
msgid "Windows debugging"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:424
msgid ""
"Debugging a module currently can only be done on a Windows host. This can"
" be useful when developing a new module or implementing bug fixes. These "
"are some steps that need to be followed to set this up:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:428
msgid "Copy the module script to the Windows server"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:429
msgid ""
"Copy the folders ``./lib/ansible/module_utils/powershell`` and "
"``./lib/ansible/module_utils/csharp`` to the same directory as the script"
" above"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:430
msgid ""
"Add an extra ``#`` to the start of any ``#Requires -Module`` lines in the"
" module code, this is only required for any lines starting with "
"``#Requires -Module``"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:431
msgid ""
"Add the following to the start of the module script that was copied to "
"the server:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:463
msgid ""
"You can add more args to ``$complex_args`` as required by the module or "
"define the module options through a JSON file with the structure::"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:475
msgid ""
"There are multiple IDEs that can be used to debug a Powershell script, "
"two of the most popular ones are"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:478
msgid "`Powershell ISE`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:479
msgid "`Visual Studio Code`_"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:484
msgid ""
"To be able to view the arguments as passed by Ansible to the module "
"follow these steps."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:487
msgid ""
"Prefix the Ansible command with "
":envvar:`ANSIBLE_KEEP_REMOTE_FILES=1<ANSIBLE_KEEP_REMOTE_FILES>` to "
"specify that Ansible should keep the exec files on the server."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:488
msgid ""
"Log onto the Windows server using the same user account that Ansible used"
" to execute the module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:489
msgid ""
"Navigate to ``%TEMP%\\..``. It should contain a folder starting with "
"``ansible-tmp-``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:490
msgid "Inside this folder, open the PowerShell script for the module."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:491
msgid ""
"In this script is a raw JSON script under ``$json_raw`` which contains "
"the module arguments under ``module_args``. These args can be assigned "
"manually to the ``$complex_args`` variable that is defined on your debug "
"script or put in the ``args.json`` file."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:495
msgid "Windows unit testing"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:497
msgid ""
"Currently there is no mechanism to run unit tests for Powershell modules "
"under Ansible CI."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:501
msgid "Windows integration testing"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:503
msgid ""
"Integration tests for Ansible modules are typically written as Ansible "
"roles. These test roles are located in ``./test/integration/targets``. "
"You must first set up your testing environment, and configure a test "
"inventory for Ansible to connect to."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:507
msgid ""
"In this example we will set up a test inventory to connect to two hosts "
"and run the integration tests for win_stat:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:510
msgid "Run the command ``source ./hacking/env-setup`` to prepare environment."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:511
msgid ""
"Create a copy of ``./test/integration/inventory.winrm.template`` and name"
" it ``inventory.winrm``."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:512
msgid ""
"Fill in entries under ``[windows]`` and set the required variables that "
"are needed to connect to the host."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:513
msgid ""
":ref:`Install the required Python modules <windows_winrm>` to support "
"WinRM and a configured authentication method."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:514
msgid ""
"To execute the integration tests, run ``ansible-test windows-integration "
"win_stat``; you can replace ``win_stat`` with the role you wish to test."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:516
msgid ""
"This will execute all the tests currently defined for that role. You can "
"set the verbosity level using the ``-v`` argument just as you would with "
"ansible-playbook."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:520
msgid ""
"When developing tests for a new module, it is recommended to test a "
"scenario once in check mode and twice not in check mode. This ensures "
"that check mode does not make any changes but reports a change, as well "
"as that the second run is idempotent and does not report changes. For "
"example:"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:573
msgid "Windows communication and development support"
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:575
msgid ""
"Join the IRC channel ``#ansible-devel`` or ``#ansible-windows`` on "
"freenode for discussions about Ansible development for Windows."
msgstr ""

#: ../../rst/dev_guide/developing_modules_general_windows.rst:578
msgid ""
"For questions and discussions pertaining to using the Ansible product, "
"use the ``#ansible`` channel."
msgstr ""

#~ msgid ""
#~ "This will download the Vagrant box "
#~ "from Vagrant Cloud and add it to"
#~ " the local boxes on your host "
#~ "and then start up that instance in"
#~ " VirtualBox. When starting for the "
#~ "first time, the Windows VM will "
#~ "run through the sysprep process and "
#~ "then create a HTTP and HTTPS WinRM"
#~ " listener automatically. Vagrant will "
#~ "finish its process once the listeners"
#~ " are onlinem, after which the VM "
#~ "can be used by Ansible."
#~ msgstr ""

