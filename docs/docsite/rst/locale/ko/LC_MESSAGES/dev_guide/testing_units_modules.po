# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/dev_guide/testing_units_modules.rst:7
msgid "Unit Testing Ansible Modules"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:11
msgid "Topics"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:14
msgid "Introduction"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:16
msgid ""
"This document explains why, how and when you should use unit tests for "
"Ansible modules. The document doesn't apply to other parts of Ansible for"
" which the recommendations are normally closer to the Python standard.  "
"There is basic documentation for Ansible unit tests in the developer "
"guide :doc:`testing_units`.  This document should be readable for a new "
"Ansible module author. If you find it incomplete or confusing, please "
"open a bug or ask for help on Ansible IRC."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:24
msgid "What Are Unit Tests?"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:26
msgid ""
"Ansible includes a set of unit tests in the :file:`test/unit` directory. "
"These tests primarily cover the internals but can also can cover Ansible "
"modules.  The structure of the unit tests matches the structure of the "
"code base, so the tests that reside in the :file:`test/unit/modules/` "
"directory are organized by module groups."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:31
msgid ""
"Integration tests can be used for most modules, but there are situations "
"where cases cannot be verified using integration tests.  This means that "
"Ansible unit test cases may extend beyond testing only minimal units and "
"in some cases will include some level of functional testing."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:38
msgid "Why Use Unit Tests?"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:40
msgid ""
"Ansible unit tests have advantages and disadvantages. It is important to "
"understand these. Advantages include:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:43
msgid ""
"Most unit tests are much faster than most Ansible integration tests.  The"
" complete suite of unit tests can be run regularly by a developer on "
"their local system."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:45
msgid ""
"Unit tests can be run by developers who don't have access to the system "
"which the module is designed to work on, allowing a level of verification"
" that changes to core functions haven't broken module expectations."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:48
msgid ""
"Unit tests can easily substitute system functions allowing testing of "
"software that would be impractical.  For example, the ``sleep()`` "
"function can be replaced and we check that a ten minute sleep was called "
"without actually waiting ten minutes."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:51
msgid ""
"Unit tests are run on different Python versions. This allows us to ensure"
" that the code behaves in the same way on different Python versions."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:54
msgid ""
"There are also some potential disadvantages of unit tests. Unit tests "
"don't normally directly test actual useful valuable features of software,"
" instead just internal implementation"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:58
msgid ""
"Unit tests that test the internal, non-visible features of software may "
"make refactoring difficult if those internal features have to change (see"
" also naming in How below)"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:61
msgid ""
"Even if the internal feature is working correctly it is possible that "
"there will be a problem between the internal code tested and the actual "
"result delivered to the user"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:64
msgid ""
"Normally the Ansible integration tests (which are written in Ansible "
"YAML) provide better testing for most module functionality.  If those "
"tests already test a feature and perform well there may be little point "
"in providing a unit test covering the same area as well."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:69
msgid "When To Use Unit Tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:71
msgid ""
"There are a number of situations where unit tests are a better choice "
"than integration tests. For example, testing things which are impossible,"
" slow or very difficult to test with integration tests, such as:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:75
msgid ""
"Forcing rare / strange / random situations that can't be forced, such as "
"specific network failures and exceptions"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:77
msgid "Extensive testing of slow configuration APIs"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:78
msgid ""
"Situations where the integration tests cannot be run as part of the main "
"Ansible continuous integration running in Shippable."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:84
msgid "Providing quick feedback"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:90
#: ../../rst/dev_guide/testing_units_modules.rst:109
msgid "Example:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:87
msgid ""
"A single step of the rds_instance test cases can take up to 20 minutes "
"(the time to create an RDS instance in Amazon).  The entire test run can "
"last for well over an hour.  All 16 of the unit tests complete execution "
"in less than 2 seconds."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:92
msgid ""
"The time saving provided by being able to run the code in a unit test "
"makes it worth creating a unit test when bug fixing a module, even if "
"those tests do not often identify problems later.  As a basic goal, every"
" module should have at least one unit test which will give quick feedback"
" in easy cases without having to wait for the integration tests to "
"complete."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:99
msgid "Ensuring correct use of external interfaces"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:101
msgid ""
"Unit tests can check the way in which external services are run to ensure"
" that they match specifications or are as efficient as possible *even "
"when the final output will not be changed*."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:105
msgid ""
"Package managers are often far more efficient when installing multiple "
"packages at once rather than each package separately. The final result is"
" the same: the packages are all installed, so the efficiency is difficult"
" to verify through integration tests. By providing a mock package manager"
" and verifying that it is called once, we can build a valuable test for "
"module efficiency."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:111
msgid ""
"Another related use is in the situation where an API has versions which "
"behave differently. A programmer working on a new version may change the "
"module to work with the new API version and unintentionally break the old"
" version.  A test case which checks that the call happens properly for "
"the old version can help avoid the problem.  In this situation it is very"
" important to include version numbering in the test case name (see "
"`Naming unit tests`_ below)."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:119
msgid "Providing specific design tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:121
msgid ""
"By building a requirement for a particular part of the code and then "
"coding to that requirement, unit tests _can_ sometimes improve the code "
"and help future developers understand that code."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:125
msgid ""
"Unit tests that test internal implementation details of code, on the "
"other hand, almost always do more harm than good.  Testing that your "
"packages to install are stored in a list would slow down and confuse a "
"future developer who might need to change that list into a dictionary for"
" efficiency. This problem can be reduced somewhat with clear test naming "
"so that the future developer immediately knows to delete the test case, "
"but it is often better to simply leave out the test case altogether and "
"test for a real valuable feature of the code, such as installing all of "
"the packages supplied as arguments to the module."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:135
msgid "How to unit test Ansible modules"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:137
msgid ""
"There are a number of techniques for unit testing modules.  Beware that "
"most modules without unit tests are structured in a way that makes "
"testing quite difficult and can lead to very complicated tests which need"
" more work than the code.  Effectively using unit tests may lead you to "
"restructure your code. This is often a good thing and leads to better "
"code overall. Good restructuring can make your code clearer and easier to"
" understand."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:145
msgid "Naming unit tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:147
msgid ""
"Unit tests should have logical names. If a developer working on the "
"module being tested breaks the test case, it should be easy to figure "
"what the unit test covers from the name. If a unit test is designed to "
"verify compatibility with a specific software or API version then include"
" the version in the name of the unit test."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:152
msgid ""
"As an example, "
"``test_v2_state_present_should_call_create_server_with_name()`` would be "
"a good name, ``test_create_server()`` would not be."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:157
msgid "Use of Mocks"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:159
msgid ""
"Mock objects (from https://docs.python.org/3/library/unittest.mock.html) "
"can be very useful in building unit tests for special / difficult cases, "
"but they can also lead to complex and confusing coding situations.  One "
"good use for mocks would be in simulating an API. As for 'six', the "
"'mock' python package is bundled with Ansible (use ``import "
"ansible.compat.tests.mock``). See for example"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:166
msgid "Ensuring failure cases are visible with mock objects"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:168
msgid ""
"Functions like :meth:`module.fail_json` are normally expected to "
"terminate execution. When you run with a mock module object this doesn't "
"happen since the mock always returns another mock from a function call. "
"You can set up the mock to raise an exception as shown above, or you can "
"assert that these functions have not been called in each test. For "
"example::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:177
msgid ""
"This applies not only to calling the main module but almost any other "
"function in a module which gets the module object."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:182
msgid "Mocking of the actual module"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:184
msgid ""
"The setup of an actual module is quite complex (see `Passing Arguments`_ "
"below) and often isn't needed for most functions which use a module. "
"Instead you can use a mock object as the module and create any module "
"attributes needed by the function you are testing. If you do this, beware"
" that the module exit functions need special handling as mentioned above,"
" either by throwing an exception or ensuring that they haven't been "
"called. For example::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:202
msgid "API definition with unit test cases"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:204
msgid ""
"API interaction is usually best tested with the function tests defined in"
" Ansible's integration testing section, which run against the actual API."
"  There are several cases where the unit tests are likely to work better."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:209
msgid "Defining a module against an API specification"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:211
msgid ""
"This case is especially important for modules interacting with web "
"services, which provide an API that Ansible uses but which are beyond the"
" control of the user."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:214
msgid ""
"By writing a custom emulation of the calls that return data from the API,"
" we can ensure that only the features which are clearly defined in the "
"specification of the API are present in the message.  This means that we "
"can check that we use the correct parameters and nothing else."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:220
msgid ""
"*Example:  in rds_instance unit tests a simple instance state is "
"defined*::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:228
msgid "This is then used to create a list of states::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:243
msgid ""
"These states are then used as returns from a mock object to ensure that "
"the ``await`` function waits through all of the states that would mean "
"the RDS instance has not yet completed configuration::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:251
msgid ""
"By doing this we check that the ``await`` function will keep waiting "
"through potentially unusual that it would be impossible to reliably "
"trigger through the integration tests but which happen unpredictably in "
"reality."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:256
msgid "Defining a module to work against multiple API versions"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:258
msgid ""
"This case is especially important for modules interacting with many "
"different versions of software; for example, package installation modules"
" that might be expected to work with many different operating system "
"versions."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:262
msgid ""
"By using previously stored data from various versions of an API we can "
"ensure that the code is tested against the actual data which will be sent"
" from that version of the system even when the version is very obscure "
"and unlikely to be available during testing."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:267
msgid "Ansible special cases for unit testing"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:269
msgid ""
"There are a number of special cases for unit testing the environment of "
"an Ansible module. The most common are documented below, and suggestions "
"for others can be found by looking at the source code of the existing "
"unit tests or asking on the Ansible IRC channel or mailing lists."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:275
msgid "Module argument processing"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:277
msgid "There are two problems with running the main function of a module:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:279
msgid ""
"Since the module is supposed to accept arguments on ``STDIN`` it is a bit"
" difficult to set up the arguments correctly so that the module will get "
"them as parameters."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:281
msgid ""
"All modules should finish by calling either the :meth:`module.fail_json` "
"or :meth:`module.exit_json`, but these won't work correctly in a testing "
"environment."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:285
msgid "Passing Arguments"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:290
msgid ""
"To pass arguments to a module correctly, use a function that stores the "
"parameters in a special string variable.  Module creation and argument "
"processing is handled through the :class:`AnsibleModule` object in the "
"basic section of the utilities. Normally this accepts input on ``STDIN``,"
" which is not convenient for unit testing. When the special variable is "
"set it will be treated as if the input came on ``STDIN`` to the module.::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:313
msgid "Handling exit correctly"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:318
msgid ""
"The :meth:`module.exit_json` function won't work properly in a testing "
"environment since it writes error information to ``STDOUT`` upon exit, "
"where it is difficult to examine. This can be mitigated by replacing it "
"(and :meth:`module.fail_json`) with a function that raises an exception::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:328
msgid ""
"Now you can ensure that the first function called is the one you expected"
" simply by testing for the correct exception::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:340
msgid ""
"The same technique can be used to replace :meth:`module.fail_json` (which"
" is used for failure returns from modules) and for the "
"``aws_module.fail_json_aws()`` (used in modules for Amazon Web Services)."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:345
msgid "Running the main function"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:347
msgid ""
"If you do want to run the actual main function of a module you must "
"import the module, set the arguments as above, set up the appropriate "
"exit exception and then run the module::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:365
msgid "Handling calls to external executables"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:367
msgid ""
"Module must use :meth:`AnsibleModule.run_command` in order to execute an "
"external command. This method needs to be mocked:"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:370
msgid ""
"Here is a simple mock of :meth:`AnsibleModule.run_command` (taken from "
":file:`test/units/modules/packaging/os/test_rhn_register.py`)::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:384
msgid "A Complete Example"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:386
msgid ""
"The following example is a complete skeleton that reuses the mocks "
"explained above and adds a new mock for :meth:`Ansible.get_bin_path`::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:472
msgid "Restructuring modules to enable testing module set up and other processes"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:474
msgid ""
"Often modules have a ``main()`` function which sets up the module and "
"then performs other actions. This can make it difficult to check argument"
" processing. This can be made easier by moving module configuration and "
"initialization into a separate function. For example::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:504
msgid ""
"This now makes it possible to run tests against the module initiation "
"function::"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:516
msgid "See also ``test/units/module_utils/aws/test_rds.py``"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:518
msgid ""
"Note that the ``argument_spec`` dictionary is visible in a module "
"variable. This has advantages, both in allowing explicit testing of the "
"arguments and in allowing the easy creation of module objects for "
"testing."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:522
msgid ""
"The same restructuring technique can be valuable for testing other "
"functionality, such as the part of the module which queries the object "
"that the module configures."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:525
msgid "Traps for maintaining Python 2 compatibility"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:527
msgid ""
"If you use the ``mock`` library from the Python 2.6 standard library, a "
"number of the assert functions are missing but will return as if "
"successful.  This means that test cases should take great care *not* use "
"functions marked as _new_ in the Python 3 documentation, since the tests "
"will likely always succeed even if the code is broken when run on older "
"versions of Python."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:532
msgid ""
"A helpful development approach to this should be to ensure that all of "
"the tests have been run under Python 2.6 and that each assertion in the "
"test cases has been checked to work by breaking the code in Ansible to "
"trigger that failure."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:536
msgid "Maintain Python 2.6 compatibility"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:538
msgid ""
"Please remember that modules need to maintain compatibility with Python "
"2.6 so the unittests for modules should also be compatible with Python "
"2.6."
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:544
msgid ":doc:`testing_units`"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:545
msgid "Ansible unit tests documentation"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:546
msgid ":doc:`testing_running_locally`"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:547
msgid "Running tests locally including gathering and reporting coverage data"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:548
msgid ":doc:`developing_modules`"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:549
msgid "How to develop modules"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:550
msgid ""
"`Python 3 documentation - 26.4. unittest — Unit testing framework "
"<https://docs.python.org/3/library/unittest.html>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:551
msgid "The documentation of the unittest framework in python 3"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:552
msgid ""
"`Python 2 documentation - 25.3. unittest — Unit testing framework "
"<https://docs.python.org/3/library/unittest.html>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:553
msgid ""
"The documentation of the earliest supported unittest framework - from "
"Python 2.6"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:554
msgid ""
"`pytest: helps you write better programs "
"<https://docs.pytest.org/en/latest/>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:555
msgid ""
"The documentation of pytest - the framework actually used to run Ansible "
"unit tests"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:556
msgid ""
"`Development Mailing List <https://groups.google.com/group/ansible-"
"devel>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:557
msgid "Mailing list for development topics"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:558
msgid ""
"`Testing Your Code (from The Hitchhiker's Guide to Python!) <https://docs"
".python-guide.org/writing/tests/>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:559
msgid "General advice on testing Python code"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:561
msgid ""
"`Uncle Bob's many videos on YouTube "
"<https://www.youtube.com/watch?v=QedpQjxBPMA&list=PLlu0CT-"
"JnSasQzGrGzddSczJQQU7295D2>`_"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:561
msgid ""
"Unit testing is a part of the of various philosophies of software "
"development, including Extreme Programming (XP), Clean Coding.  Uncle Bob"
" talks through how to benfit from this"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:563
msgid ""
"`\"Why Most Unit Testing is Waste\" https://rbcs-us.com/documents/Why-"
"Most-Unit-Testing-is-Waste.pdf`"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:564
msgid "An article warning against the costs of unit testing"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:565
msgid ""
"`'A Response to \"Why Most Unit Testing is Waste\"' "
"https://henrikwarne.com/2014/09/04/a-response-to-why-most-unit-testing-"
"is-waste/`"
msgstr ""

#: ../../rst/dev_guide/testing_units_modules.rst:566
msgid "An response pointing to how to maintain the value of unit tests"
msgstr ""

