# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2018 Ansible, Inc
# This file is distributed under the same license as the Ansible
# Documentation package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible Documentation 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-18 15:38+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/dev_guide/testing.rst:5
msgid "Testing Ansible"
msgstr ""

#: ../../rst/dev_guide/testing.rst:9
msgid "Topics"
msgstr ""

#: ../../rst/dev_guide/testing.rst:12
msgid "Why test your Ansible contributions?"
msgstr ""

#: ../../rst/dev_guide/testing.rst:14
msgid ""
"If you're a developer, one of the most valuable things you can do is to "
"look at GitHub issues and help fix bugs, since bug-fixing is almost "
"always prioritized over feature development.  Even for non-developers, "
"helping to test pull requests for bug fixes and features is still "
"immensely valuable."
msgstr ""

#: ../../rst/dev_guide/testing.rst:16
msgid ""
"Ansible users who understand how to write playbooks and roles should be "
"able to test their work.  GitHub pull requests will automatically run a "
"variety of tests (e.g., Shippable) that show bugs in action.  However, "
"contributors must also test their work outside of the automated GitHub "
"checks and show evidence of these tests in the PR to ensure that their "
"work will be more likely to be reviewed and merged."
msgstr ""

#: ../../rst/dev_guide/testing.rst:18
msgid ""
"Read on to learn how Ansible is tested, how to test your contributions "
"locally, and how to extend testing capabilities."
msgstr ""

#: ../../rst/dev_guide/testing.rst:23
msgid "Types of tests"
msgstr ""

#: ../../rst/dev_guide/testing.rst:25
msgid "At a high level we have the following classifications of tests:"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "compile"
msgstr ""

#: ../../rst/dev_guide/testing.rst:28
msgid ":ref:`testing_compile`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:29
msgid "Test python code against a variety of Python versions."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "sanity"
msgstr ""

#: ../../rst/dev_guide/testing.rst:31
msgid ":ref:`testing_sanity`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:32
msgid ""
"Sanity tests are made up of scripts and tools used to perform static code"
" analysis."
msgstr ""

#: ../../rst/dev_guide/testing.rst:33
msgid ""
"The primary purpose of these tests is to enforce Ansible coding standards"
" and requirements."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "integration"
msgstr ""

#: ../../rst/dev_guide/testing.rst:35
msgid ":ref:`testing_integration`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:36
msgid "Functional tests of modules and Ansible core functionality."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "units"
msgstr ""

#: ../../rst/dev_guide/testing.rst:38
msgid ":ref:`testing_units`"
msgstr ""

#: ../../rst/dev_guide/testing.rst:39
msgid "Tests directly against individual parts of the code base."
msgstr ""

#: ../../rst/dev_guide/testing.rst:42
msgid ""
"If you're a developer, one of the most valuable things you can do is look"
" at the GitHub issues list and help fix bugs.  We almost always "
"prioritize bug fixing over feature development."
msgstr ""

#: ../../rst/dev_guide/testing.rst:46
msgid ""
"Even for non developers, helping to test pull requests for bug fixes and "
"features is still immensely valuable.  Ansible users who understand "
"writing playbooks and roles should be able to add integration tests and "
"so GitHub pull requests with integration tests that show bugs in action "
"will also be a great way to help."
msgstr ""

#: ../../rst/dev_guide/testing.rst:53
msgid "Testing within GitHub & Shippable"
msgstr ""

#: ../../rst/dev_guide/testing.rst:57
msgid "Organization"
msgstr ""

#: ../../rst/dev_guide/testing.rst:59
msgid ""
"When Pull Requests (PRs) are created they are tested using Shippable, a "
"Continuous Integration (CI) tool. Results are shown at the end of every "
"PR."
msgstr ""

#: ../../rst/dev_guide/testing.rst:61
msgid ""
"When Shippable detects an error and it can be linked back to a file that "
"has been modified in the PR then the relevant lines will be added as a "
"GitHub comment. For example::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:71
msgid ""
"From the above example we can see that ``--test pep8`` and ``--test "
"validate-modules`` have identified issues. The commands given allow you "
"to run the same tests locally to ensure you've fixed the issues without "
"having to push your changed to GitHub and wait for Shippable, for "
"example:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:73
msgid ""
"If you haven't already got Ansible available, use the local checkout by "
"running::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:77
msgid "Then run the tests detailed in the GitHub comment::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:82
msgid ""
"If there isn't a GitHub comment stating what's failed you can inspect the"
" results by clicking on the \"Details\" button under the \"checks have "
"failed\" message at the end of the PR."
msgstr ""

#: ../../rst/dev_guide/testing.rst:85
msgid "Rerunning a failing CI job"
msgstr ""

#: ../../rst/dev_guide/testing.rst:87
msgid ""
"Occasionally you may find your PR fails due to a reason unrelated to your"
" change. This could happen for several reasons, including:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:89
msgid ""
"a temporary issue accessing an external resource, such as a yum or git "
"repo"
msgstr ""

#: ../../rst/dev_guide/testing.rst:90
msgid "a timeout creating a virtual machine to run the tests on"
msgstr ""

#: ../../rst/dev_guide/testing.rst:92
msgid ""
"If either of these issues appear to be the case, you can rerun the "
"Shippable test by:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:94
msgid "closing and re-opening the PR"
msgstr ""

#: ../../rst/dev_guide/testing.rst:95
msgid "making another change to the PR and pushing to GitHub"
msgstr ""

#: ../../rst/dev_guide/testing.rst:97
msgid ""
"If the issue persists, please contact us in ``#ansible-devel`` on "
"Freenode IRC."
msgstr ""

#: ../../rst/dev_guide/testing.rst:101
msgid "How to test a PR"
msgstr ""

#: ../../rst/dev_guide/testing.rst:103
msgid ""
"Ideally, code should add tests that prove that the code works. That's not"
" always possible and tests are not always comprehensive, especially when "
"a user doesn't have access to a wide variety of platforms, or is using an"
" API or web service. In these cases, live testing against real equipment "
"can be more valuable than automation that runs against simulated "
"interfaces. In any case, things should always be tested manually the "
"first time as well."
msgstr ""

#: ../../rst/dev_guide/testing.rst:105
msgid ""
"Thankfully, helping to test Ansible is pretty straightforward, assuming "
"you are familiar with how Ansible works."
msgstr ""

#: ../../rst/dev_guide/testing.rst:108
msgid "Setup: Checking out a Pull Request"
msgstr ""

#: ../../rst/dev_guide/testing.rst:110
msgid "You can do this by:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:112
msgid "checking out Ansible"
msgstr ""

#: ../../rst/dev_guide/testing.rst:113
msgid "making a test branch off the main branch"
msgstr ""

#: ../../rst/dev_guide/testing.rst:114
msgid "merging a GitHub issue"
msgstr ""

#: ../../rst/dev_guide/testing.rst:115
msgid "testing"
msgstr ""

#: ../../rst/dev_guide/testing.rst:116
msgid "commenting on that particular issue on GitHub"
msgstr ""

#: ../../rst/dev_guide/testing.rst:118
msgid "Here's how:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:121
msgid ""
"Testing source code from GitHub pull requests sent to us does have some "
"inherent risk, as the source code sent may have mistakes or malicious "
"code that could have a negative impact on your system. We recommend doing"
" all testing on a virtual machine, whether a cloud instance, or locally."
"  Some users like Vagrant or Docker for this, but they are optional. It "
"is also useful to have virtual machines of different Linux or other "
"flavors, since some features (apt vs. yum, for example) are specific to "
"those OS versions."
msgstr ""

#: ../../rst/dev_guide/testing.rst:128
msgid "Create a fresh area to work::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:134
msgid ""
"Next, find the pull request you'd like to test and make note of the line "
"at the top which describes the source and destination repositories. It "
"will look something like this::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:139
msgid "Only test ``ansible:devel``"
msgstr ""

#: ../../rst/dev_guide/testing.rst:141
msgid ""
"It is important that the PR request target be ``ansible:devel``, as we do"
" not accept pull requests into any other branch. Dot releases are cherry-"
"picked manually by Ansible staff."
msgstr ""

#: ../../rst/dev_guide/testing.rst:143
msgid ""
"The username and branch at the end are the important parts, which will be"
" turned into git commands as follows::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:148
msgid ""
"The first command creates and switches to a new branch named "
"``testing_PRXXXX``, where the XXXX is the actual issue number associated "
"with the pull request (for example, 1234). This branch is based on the "
"``devel`` branch. The second command pulls the new code from the users "
"feature branch into the newly created branch."
msgstr ""

#: ../../rst/dev_guide/testing.rst:151
msgid ""
"If the GitHub user interface shows that the pull request will not merge "
"cleanly, we do not recommend proceeding if you are not somewhat familiar "
"with git and coding, as you will have to resolve a merge conflict. This "
"is the responsibility of the original pull request contributor."
msgstr ""

#: ../../rst/dev_guide/testing.rst:154
msgid ""
"Some users do not create feature branches, which can cause problems when "
"they have multiple, unrelated commits in their version of ``devel``. If "
"the source looks like ``someuser:devel``, make sure there is only one "
"commit listed on the pull request."
msgstr ""

#: ../../rst/dev_guide/testing.rst:156
msgid ""
"The Ansible source includes a script that allows you to use Ansible "
"directly from source without requiring a full installation that is "
"frequently used by developers on Ansible."
msgstr ""

#: ../../rst/dev_guide/testing.rst:159
msgid ""
"Simply source it (to use the Linux/Unix terminology) to begin using it "
"immediately::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:163
msgid ""
"This script modifies the ``PYTHONPATH`` environment variables (along with"
" a few other things), which will be temporarily set as long as your shell"
" session is open."
msgstr ""

#: ../../rst/dev_guide/testing.rst:167
msgid "Testing the Pull Request"
msgstr ""

#: ../../rst/dev_guide/testing.rst:169
msgid "At this point, you should be ready to begin testing!"
msgstr ""

#: ../../rst/dev_guide/testing.rst:171
msgid "Some ideas of what to test are:"
msgstr ""

#: ../../rst/dev_guide/testing.rst:173
msgid ""
"Create a test Playbook with the examples in and check if they function "
"correctly"
msgstr ""

#: ../../rst/dev_guide/testing.rst:174
msgid "Test to see if any Python backtraces returned (that's a bug)"
msgstr ""

#: ../../rst/dev_guide/testing.rst:175
msgid "Test on different operating systems, or against different library versions"
msgstr ""

#: ../../rst/dev_guide/testing.rst:178
msgid ""
"Any potential issues should be added as comments on the pull request (and"
" it's acceptable to comment if the feature works as well), remembering to"
" include the output of ``ansible --version``"
msgstr ""

#: ../../rst/dev_guide/testing.rst:180
msgid "Example::"
msgstr ""

#: ../../rst/dev_guide/testing.rst:184
msgid ""
"If the PR does not resolve the issue, or if you see any failures from the"
" unit/integration tests, just include that output instead:"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "This doesn't work for me."
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "When I ran this Ubuntu 16.04 it failed with the following:"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "\\```"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "some output"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "StackTrace"
msgstr ""

#: ../../rst/dev_guide/testing.rst
msgid "some other output"
msgstr ""

#: ../../rst/dev_guide/testing.rst:197
msgid "Code Coverage Online"
msgstr ""

#: ../../rst/dev_guide/testing.rst:199
msgid ""
"`The online code coverage reports "
"<https://codecov.io/gh/ansible/ansible>`_ are a good way to identify "
"areas for testing improvement in Ansible.  By following red colors you "
"can drill down through the reports to find files which have no tests at "
"all.  Adding both integration and unit tests which show clearly how code "
"should work, verify important Ansible functions and increase testing "
"coverage in areas where there is none is a valuable way to help improve "
"Ansible."
msgstr ""

#: ../../rst/dev_guide/testing.rst:206
msgid ""
"The code coverage reports only cover the ``devel`` branch of Ansible "
"where new feature development takes place.  Pull requests and new code "
"will be missing from the codecov.io coverage reports so local reporting "
"is needed.  Most ``ansible-test`` commands allow you to collect code "
"coverage, this is particularly useful to indicate where to extend "
"testing. See :doc:`testing_running_locally` for more information."
msgstr ""

#: ../../rst/dev_guide/testing.rst:214
msgid "Want to know more about testing?"
msgstr ""

#: ../../rst/dev_guide/testing.rst:216
msgid ""
"If you'd like to know more about the plans for improving testing Ansible "
"then why not join the `Testing Working Group "
"<https://github.com/ansible/community/blob/master/meetings/README.md>`_."
msgstr ""

