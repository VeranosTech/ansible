# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 Red Hat, Inc.
# This file is distributed under the same license as the Ansible package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Ansible devel\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-30 11:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:5
msgid "Guidelines for Ansible Amazon AWS module development"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:7
msgid ""
"The Ansible AWS modules and these guidelines are maintained by the "
"Ansible AWS Working Group.  For further information see the `AWS working "
"group community page <https://github.com/ansible/community/wiki/aws>`_. "
"If you are planning to contribute AWS modules to Ansible then getting in "
"touch with the working group will be a good way to start, especially "
"because a similar module may already be under development."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:18
msgid "Maintaining existing modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:21
msgid "Fixing bugs"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:23
msgid ""
"Bug fixes to code that relies on boto will still be accepted. When "
"possible, the code should be ported to use boto3."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:27
msgid "Adding new features"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:29
msgid ""
"Try to keep backward compatibility with relatively recent versions of "
"boto3. That means that if you want to implement some functionality that "
"uses a new feature of boto3, it should only fail if that feature actually"
" needs to be run, with a message stating the missing feature and minimum "
"required version of boto3."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:34
msgid ""
"Use feature testing (e.g. ``hasattr('boto3.module', "
"'shiny_new_method')``) to check whether boto3 supports a feature rather "
"than version checking. For example, from the ``ec2`` module:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:46
msgid "Migrating to boto3"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:48
msgid ""
"Prior to Ansible 2.0, modules were written in either boto3 or boto. We "
"are still porting some modules to boto3. Modules that still require boto "
"should be ported to use boto3 rather than using both libraries (boto and "
"boto3). We would like to remove the boto dependency from all modules."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:52
msgid "Porting code to AnsibleAWSModule"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:54
msgid ""
"Some old AWS modules use the generic ``AnsibleModule`` as a base rather "
"than the more efficient ``AnsibleAWSModule``. To port an old module to "
"``AnsibleAWSModule``, change:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:62
msgid "to:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:70
msgid ""
"Few other changes are required. AnsibleAWSModule does not inherit methods"
" from AnsibleModule by default, but most useful methods are included. If "
"you do find an issue, please raise a bug report."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:74
msgid ""
"When porting, keep in mind that AnsibleAWSModule also will add the "
"default ec2 argument spec by default. In pre-port modules, you should see"
" common arguments specified with:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:89
msgid "These can be replaced with:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:102
msgid "Creating new AWS modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:105
msgid "Use boto3 and AnsibleAWSModule"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:107
msgid "All new AWS modules must use boto3 and ``AnsibleAWSModule``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:109
msgid ""
"``AnsibleAWSModule`` greatly simplifies exception handling and library "
"management, reducing the amount of boilerplate code. If you cannot use "
"``AnsibleAWSModule`` as a base, you must document the reason and request "
"an exception to this rule."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:114
msgid "Naming your module"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:116
msgid ""
"Base the name of the module on the part of AWS that you actually use. (A "
"good rule of thumb is to take whatever module you use with boto as a "
"starting point).  Don't further abbreviate names - if something is a well"
" known abbreviation of a major component of AWS (for example, VPC or "
"ELB), that's fine, but don't create new ones independently."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:121
msgid ""
"Unless the name of your service is quite unique, please consider using "
"``aws_`` as a prefix. For example ``aws_lambda``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:124
msgid "Importing botocore and boto3"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:126
msgid ""
"The ``ansible.module_utils.ec2`` module and "
"``ansible.module_utils.core.aws`` modules both automatically import boto3"
" and botocore.  If boto3 is missing from the system then the variable "
"``HAS_BOTO3`` will be set to false.  Normally, this means that modules "
"don't need to import boto3 directly. There is no need to check "
"``HAS_BOTO3`` when using AnsibleAWSModule as the module does that check:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:140
msgid "or:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:157
msgid "Connecting to AWS"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:159
msgid ""
"AnsibleAWSModule provides the ``resource`` and ``client`` helper methods "
"for obtaining boto3 connections. These handle some of the more esoteric "
"connection options, such as security tokens and boto profiles."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:162
msgid ""
"If using the basic AnsibleModule then you should use "
"``get_aws_connection_info`` and then ``boto3_conn`` to connect to AWS as "
"these handle the same range of connection options."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:165
msgid ""
"These helpers also for missing profiles or a region not set when it needs"
" to be, so you don't have to."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:167
msgid ""
"An example of connecting to ec2 is shown below. Note that unlike boto "
"there is no ``NoAuthHandlerFound`` exception handling like in boto. "
"Instead, an ``AuthFailure`` exception will be thrown when you use the "
"connection. To ensure that authorization, parameter validation and "
"permissions errors are all caught, you should catch ``ClientError`` and "
"``BotoCoreError`` exceptions with every boto3 connection call. See "
"exception handling:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:177
msgid "or for the higher level ec2 resource:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:184
msgid ""
"An example of the older style connection used for modules based on "
"AnsibleModule rather than AnsibleAWSModule:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:198
msgid "Common Documentation Fragments for Connection Parameters"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:200
msgid ""
"There are two :ref:`common documentation fragments "
"<module_docs_fragments>` that should be included into almost all AWS "
"modules:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:203
msgid "``aws`` - contains the common boto connection parameters"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:204
msgid ""
"``ec2`` - contains the common region parameter required for many AWS "
"modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:206
msgid ""
"These fragments should be used rather than re-documenting these "
"properties to ensure consistency and that the more esoteric connection "
"options are documented. For example:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:221
msgid "Handling exceptions"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:223
msgid ""
"You should wrap any boto3 or botocore call in a try block. If an "
"exception is thrown, then there are a number of possibilities for "
"handling it."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:226
msgid "Catch the general ``ClientError`` or look for a specific error code with"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:227
msgid "``is_boto3_error_code``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:228
msgid ""
"Use ``aws_module.fail_json_aws()`` to report the module failure in a "
"standard way"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:229
msgid "Retry using AWSRetry"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:230
msgid ""
"Use ``fail_json()`` to report the failure without using "
"``ansible.module_utils.aws.core``"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:231
msgid "Do something custom in the case where you know how to handle the exception"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:233
msgid ""
"For more information on botocore exception handling see the `botocore "
"error documentation "
"<https://botocore.readthedocs.io/en/latest/client_upgrades.html#error-"
"handling>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:236
msgid "Using is_boto3_error_code"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:238
msgid ""
"To use ``ansible.module_utils.aws.core.is_boto3_error_code`` to catch a "
"single AWS error code, call it in place of ``ClientError`` in your except"
" clauses. In this case, *only* the ``InvalidGroup.NotFound`` error code "
"will be caught here, and any other error will be raised for handling "
"elsewhere in the program."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:252
msgid "Using fail_json_aws()"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:254
msgid ""
"In the AnsibleAWSModule there is a special method, "
"``module.fail_json_aws()`` for nice reporting of exceptions.  Call this "
"on your exception and it will report the error together with a traceback "
"for use in Ansible verbose mode."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:258
msgid ""
"You should use the AnsibleAWSModule for all new modules, unless not "
"possible. If adding significant amounts of exception handling to existing"
" modules, we recommend migrating the module to use AnsibleAWSModule "
"(there are very few changes required to do this)"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:279
msgid ""
"Note that it should normally be acceptable to catch all normal exceptions"
" here, however if you expect anything other than botocore exceptions you "
"should test everything works as expected."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:282
#: ../../rst/dev_guide/platforms/aws_guidelines.rst:327
msgid ""
"If you need to perform an action based on the error boto3 returned, use "
"the error code."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:299
msgid "using fail_json() and avoiding ansible.module_utils.aws.core"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:301
msgid ""
"Boto3 provides lots of useful information when an exception is thrown so "
"pass this to the user along with the message."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:324
msgid ""
"Note: we use `str(e)` rather than `e.message` as the latter doesn't work "
"with python3"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:347
msgid "API throttling (rate limiting) and pagination"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:349
msgid ""
"For methods that return a lot of results, boto3 often provides "
"`paginators "
"<http://boto3.readthedocs.io/en/latest/guide/paginators.html>`_. If the "
"method you're calling has ``NextToken`` or ``Marker`` parameters, you "
"should probably check whether a paginator exists (the top of each boto3 "
"service reference page has a link to Paginators, if the service has any)."
" To use paginators, obtain a paginator object, call "
"``paginator.paginate`` with the appropriate arguments and then call "
"``build_full_result``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:356
msgid ""
"Any time that you are calling the AWS API a lot, you may experience API "
"throttling, and there is an ``AWSRetry`` decorator that can be used to "
"ensure backoff. Because exception handling could interfere with the retry"
" working properly (as AWSRetry needs to catch throttling exceptions to "
"work correctly), you'd need to provide a backoff function and then put "
"exception handling around the backoff function."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:362
msgid ""
"You can use ``exponential_backoff`` or ``jittered_backoff`` strategies - "
"see the cloud ``module_utils`` ()/lib/ansible/module_utils/cloud.py) and "
"`AWS Architecture blog "
"<https://www.awsarchitectureblog.com/2015/03/backoff.html>`_ for more "
"details."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:366
msgid "The combination of these two approaches is then:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:383
msgid ""
"If the underlying ``describe_some_resources`` API call throws a "
"``ResourceNotFound`` exception, ``AWSRetry`` takes this as a cue to retry"
" until it's not thrown (this is so that when creating a resource, we can "
"just retry until it exists)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:387
msgid ""
"To handle authorization failures or parameter validation errors in "
"``describe_some_resource_with_backoff``, where we just want to return "
"``None`` if the resource doesn't exist and not retry, we need:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:413
msgid ""
"To make use of AWSRetry easier, it can now be wrapped around a client "
"returned by ``AnsibleAWSModule``. any call from a client. To add retries "
"to a client, create a client:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:421
msgid ""
"Any calls from that client can be made to use the decorator passed at "
"call-time using the `aws_retry` argument. By default, no retries are "
"used."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:436
msgid ""
"The call will be retried the specified number of times, so the calling "
"functions don't need to be wrapped in the backoff decorator."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:439
msgid ""
"You can also use customization for ``retries``, ``delay`` and "
"``max_delay`` parameters used by ``AWSRetry.jittered_backoff`` API using "
"module params. You can take a look at the `cloudformation "
"<cloudformation_module>` module for example."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:444
msgid ""
"To make all Amazon modules uniform, prefix the module param with "
"``backoff_``, so ``retries`` becomes ``backoff_retries``"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:444
msgid "and likewise with ``backoff_delay`` and ``backoff_max_delay``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:447
msgid "Returning Values"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:449
msgid ""
"When you make a call using boto3, you will probably get back some useful "
"information that you should return in the module.  As well as information"
" related to the call itself, you will also have some response metadata.  "
"It is OK to return this to the user as well as they may find it useful."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:453
msgid ""
"Boto3 returns all values CamelCased.  Ansible follows Python standards "
"for variable names and uses snake_case. There is a helper function in "
"module_utils/ec2.py called `camel_dict_to_snake_dict` that allows you to "
"easily convert the boto3 response to snake_case."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:457
msgid ""
"You should use this helper function and avoid changing the names of "
"values returned by Boto3. E.g. if boto3 returns a value called "
"'SecretAccessKey' do not change it to 'AccessKey'."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:469
msgid "Dealing with IAM JSON policy"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:471
msgid ""
"If your module accepts IAM JSON policies then set the type to 'json' in "
"the module spec. For example:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:482
msgid ""
"Note that AWS is unlikely to return the policy in the same order that is "
"was submitted. Therefore, use the `compare_policies` helper function "
"which handles this variance."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:485
msgid ""
"`compare_policies` takes two dictionaries, recursively sorts and makes "
"them hashable for comparison and returns True if they are different."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:509
msgid "Dealing with tags"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:511
msgid ""
"AWS has a concept of resource tags. Usually the boto3 API has separate "
"calls for tagging and untagging a resource.  For example, the ec2 API has"
" a create_tags and delete_tags call."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:514
msgid ""
"It is common practice in Ansible AWS modules to have a `purge_tags` "
"parameter that defaults to true."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:517
msgid ""
"The `purge_tags` parameter means that existing tags will be deleted if "
"they are not specified by the Ansible task."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:520
msgid ""
"There is a helper function `compare_aws_tags` to ease dealing with tags. "
"It can compare two dicts and return the tags to set and the tags to "
"delete.  See the Helper function section below for more detail."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:525
msgid "Helper functions"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:527
msgid ""
"Along with the connection functions in Ansible ec2.py module_utils, there"
" are some other useful functions detailed below."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:531
msgid "camel_dict_to_snake_dict"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:533
msgid ""
"boto3 returns results in a dict.  The keys of the dict are in CamelCase "
"format. In keeping with Ansible format, this function will convert the "
"keys to snake_case."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:536
msgid ""
"``camel_dict_to_snake_dict`` takes an optional parameter called "
"``ignore_list`` which is a list of keys not to convert (this is usually "
"useful for the ``tags`` dict, whose child keys should remain with case "
"preserved)"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:540
msgid ""
"Another optional parameter is ``reversible``. By default, "
"``HTTPEndpoint`` is converted to ``http_endpoint``, which would then be "
"converted by ``snake_dict_to_camel_dict`` to ``HttpEndpoint``. Passing "
"``reversible=True`` converts HTTPEndpoint to ``h_t_t_p_endpoint`` which "
"converts back to ``HTTPEndpoint``."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:545
msgid "snake_dict_to_camel_dict"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:547
msgid ""
"`snake_dict_to_camel_dict` converts snake cased keys to camel case. By "
"default, because it was first introduced for ECS purposes, this converts "
"to dromedaryCase. An optional parameter called `capitalize_first`, which "
"defaults to `False`, can be used to convert to CamelCase."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:552
msgid "ansible_dict_to_boto3_filter_list"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:554
msgid ""
"Converts a an Ansible list of filters to a boto3 friendly list of dicts."
"  This is useful for any boto3 `_facts` modules."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:558
msgid "boto_exception"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:560
msgid ""
"Pass an exception returned from boto or boto3, and this function will "
"consistently get the message from the exception."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:562
msgid "Deprecated: use `AnsibleAWSModule`'s `fail_json_aws` instead."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:566
msgid "boto3_tag_list_to_ansible_dict"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:568
msgid ""
"Converts a boto3 tag list to an Ansible dict. Boto3 returns tags as a "
"list of dicts containing keys called 'Key' and 'Value' by default.  This "
"key names can be overridden when calling the function. For example, if "
"you have already camel_cased your list of tags you may want to pass "
"lowercase key names instead i.e. 'key' and 'value'."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:573
msgid ""
"This function converts the list in to a single dict where the dict key is"
" the tag key and the dict value is the tag value."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:577
msgid "ansible_dict_to_boto3_tag_list"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:579
msgid ""
"Opposite of above. Converts an Ansible dict to a boto3 tag list of dicts."
" You can again override the key names used if 'Key' and 'Value' is not "
"suitable."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:583
msgid "get_ec2_security_group_ids_from_names"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:585
msgid ""
"Pass this function a list of security group names or combination of "
"security group names and IDs and this function will return a list of IDs."
"  You should also pass the VPC ID if known because security group names "
"are not necessarily unique across VPCs."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:590
msgid "compare_policies"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:592
msgid ""
"Pass two dicts of policies to check if there are any meaningful "
"differences and returns true if there are. This recursively sorts the "
"dicts and makes them hashable before comparison."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:595
msgid ""
"This method should be used any time policies are being compared so that a"
" change in order doesn't result in unnecessary changes."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:599
msgid "compare_aws_tags"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:601
msgid ""
"Pass two dicts of tags and an optional purge parameter and this function "
"will return a dict containing key pairs you need to modify and a list of "
"tag key names that you need to remove.  Purge is True by default.  If "
"purge is False then any existing tags will not be modified."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:605
msgid ""
"This function is useful when using boto3 'add_tags' and 'remove_tags' "
"functions. Be sure to use the other helper function "
"`boto3_tag_list_to_ansible_dict` to get an appropriate tag dict before "
"calling this function. Since the AWS APIs are not uniform (e.g. EC2 "
"versus Lambda) this will work without modification for some (Lambda) and "
"others may need modification before using these values (such as EC2, with"
" requires the tags to unset to be in the form `[{'Key': key1}, {'Key': "
"key2}]`)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:612
msgid "Integration Tests for AWS Modules"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:614
msgid ""
"All new AWS modules should include integration tests to ensure that any "
"changes in AWS APIs that affect the module are detected. At a minimum "
"this should cover the key API calls and check the documented return "
"values are present in the module result."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:618
msgid ""
"For general information on running the integration tests see the "
":ref:`Integration Tests page of the Module Development Guide "
"<testing_integration>`, especially the section on configuration for cloud"
" tests."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:621
msgid ""
"The integration tests for your module should be added in "
"`test/integration/targets/MODULE_NAME`."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:623
msgid ""
"You must also have a aliases file in "
"`test/integration/targets/MODULE_NAME/aliases`. This file serves two "
"purposes. First indicates it's in an AWS test causing the test framework "
"to make AWS credentials available during the test run. Second putting the"
" test in a test group causing it to be run in the continuous integration "
"build."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:628
msgid ""
"Tests for new modules should be added to the same group as existing AWS "
"tests. In general just copy an existing aliases file such as the `aws_s3 "
"tests aliases file "
"<https://github.com/ansible/ansible/blob/devel/test/integration/targets/aws_s3/aliases>`_."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:632
msgid "AWS Credentials for Integration Tests"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:634
msgid ""
"The testing framework handles running the test with appropriate AWS "
"credentials, these are made available to your test in the following "
"variables:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:637
msgid "`aws_region`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:638
msgid "`aws_access_key`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:639
msgid "`aws_secret_key`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:640
msgid "`security_token`"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:642
msgid ""
"So all invocations of AWS modules in the test should set these "
"parameters. To avoid duplication these for every call, it's preferable to"
" use `YAML Anchors <http://blog.daemonl.com/2016/02/yaml.html>`_. For "
"example:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:667
msgid "AWS Permissions for Integration Tests"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:669
msgid ""
"As explained in the :ref:`Integration Test guide <testing_integration>` "
"there are defined IAM policies in "
"``hacking/aws_config/testing_policies/`` that contain the necessary "
"permissions to run the AWS integration test. The permissions used by CI "
"are more restrictive than those in "
"``hacking/aws_config/testing_policies``; for CI we want the most "
"restrictive policy possible that still allows the given tests to pass."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:674
msgid ""
"If your module interacts with a new service or otherwise requires new "
"permissions, tests will fail when you submit a pull request and the "
"`Ansibullbot "
"<https://github.com/ansible/ansibullbot/blob/master/ISSUE_HELP.md>`_ will"
" tag your PR as needing revision. We do not automatically grant "
"additional permissions to the roles used by the continuous integration "
"builds. You must provide the minimum IAM permissions required to run your"
" integration test."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:678
msgid ""
"If your PR has test failures, check carefully to be certain the failure "
"is only due to the missing permissions. If you've ruled out other sources"
" of failure, add a comment with the `ready_for_review` tag and explain "
"that it's due to missing permissions."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:681
msgid ""
"Your pull request cannot be merged until the tests are passing. If your "
"pull request is failing due to missing permissions, you must collect the "
"minimum IAM permissions required to run the tests."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:685
msgid ""
"There are two ways to figure out which IAM permissions you need for your "
"PR to pass:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:687
msgid ""
"Start with the most permissive IAM policy, run the tests to collect "
"information about which resources your tests actually use, then construct"
" a policy based on that output. This approach only works on modules that "
"use `AnsibleAWSModule`."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:688
msgid ""
"Start with the least permissive IAM policy, run the tests to discover a "
"failure, add permissions for the resource that addresses that failure, "
"then repeat. If your module uses `AnsibleModule` instead of "
"`AnsibleAWSModule`, you must use this approach."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:690
msgid "To start with the most permissive IAM policy:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:692
msgid ""
"`Create an IAM policy "
"<https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create.html"
"#access_policies_create-start>`_ that allows all actions (set ``Action`` "
"and ``Resource`` to ``*```)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:693
msgid ""
"Run your tests locally with this policy. On AnsibleAWSModule-based "
"modules, the ``debug_botocore_endpoint_logs`` option is automatically set"
" to ``yes``, so you should see a list of AWS ACTIONS after the PLAY RECAP"
" showing all the permissions used. If your tests use a boto/AnsibleModule"
" module, you must start with the least permissive policy (see below)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:694
msgid ""
"Modify your policy to allow only the actions your tests use. Restrict "
"account, region, and prefix where possible. Wait a few minutes for your "
"policy to update."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:695
msgid "Run the tests again with a user or role that allows only the new policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:696
msgid ""
"If the tests fail, troubleshoot (see tips below), modify the policy, run "
"the tests again, and repeat the process until the tests pass with a "
"restrictive policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:697
#: ../../rst/dev_guide/platforms/aws_guidelines.rst:714
msgid "Share the minimum policy in a comment on your PR."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:699
msgid "To start from the least permissive IAM policy:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:701
msgid "Run the integration tests locally with no IAM permissions."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:709
msgid "Examine the error when the tests reach a failure."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:703
msgid ""
"If the error message indicates the action used in the request, add the "
"action to your policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:705
msgid "If the error message does not indicate the action used in the request:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:705
msgid ""
"Usually the action is a CamelCase version of the method name - for "
"example, for an ec2 client the method `describe_security_groups` "
"correlates to the action `ec2:DescribeSecurityGroups`."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:706
msgid "Refer to the documentation to identify the action."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:707
msgid ""
"If the error message indicates the resource ARN used in the request, "
"limit the action to that resource."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:709
msgid "If the error message does not indicate the resource ARN used:"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:709
msgid ""
"Determine if the action can be restricted to a resource by examining the "
"documentation."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:710
msgid ""
"If the action can be restricted, use the documentation to construct the "
"ARN and add it to the policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:711
msgid ""
"Add the action or resource that caused the failure to `an IAM policy "
"<https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_create.html"
"#access_policies_create-start>`_. Wait a few minutes for your policy to "
"update."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:712
msgid "Run the tests again with this policy attached to your user or role."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:713
msgid ""
"If the tests still fail at the same place with the same error you will "
"need to troubleshoot (see tips below). If the first test passes, repeat "
"steps 2 and 3 for the next error. Repeat the process until the tests pass"
" with a restrictive policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:717
msgid "Troubleshooting IAM policies"
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:719
msgid ""
"When you make changes to a policy, wait a few minutes for the policy to "
"update before re-running the tests."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:720
msgid ""
"Use the `policy simulator <https://policysim.aws.amazon.com/>`_ to verify"
" that each action (limited by resource when applicable) in your policy is"
" allowed."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:721
msgid ""
"If you're restricting actions to certain resources, replace resources "
"temporarily with `*`. If the tests pass with wildcard resources, there is"
" a problem with the resource definition in your policy."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:722
msgid ""
"If the initial troubleshooting above doesn't provide any more insight, "
"AWS may be using additional undisclosed resources and actions."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:723
msgid "Examine the AWS FullAccess policy for the service for clues."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:724
msgid ""
"Re-read the AWS documentation, especially the list of `Actions, Resources"
" and Condition Keys <https://docs.aws.amazon.com/IAM/latest/UserGuide"
"/reference_policies_actions-resources-contextkeys.html>`_ for the various"
" AWS services."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:725
msgid ""
"Look at the `cloudonaut <https://iam.cloudonaut.io>`_ documentation as a "
"troubleshooting cross-reference."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:726
msgid "Use a search engine."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:727
msgid "Ask in the Ansible IRC channel #ansible-aws (on freenode IRC)."
msgstr ""

#: ../../rst/dev_guide/platforms/aws_guidelines.rst:729
msgid ""
"Some cases where tests should be marked as unsupported: 1) The tests take"
" longer than 10 or 15 minutes to complete 2) The tests create expensive "
"resources 3) The tests create inline policies"
msgstr ""

